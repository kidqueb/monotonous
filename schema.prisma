// ======================
// Config
// ======================

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// ======================
// Enums
// ======================

enum TeamRoles {
  ADMIN
  MEMBER
  BILLING
}

enum MembershipStatuses {
  PENDING
  ACCEPTED
  BANNED
}

enum ProjectRoles {
  ADMIN
  REVIEWER
  VIEWER
}

// ======================
// Models
// ======================

model User {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  confirmed         Boolean            @default(false)
  email             String             @unique
  //
  emailConfirmation EmailConfirmation?
  profile           UserProfile?
  teamMemberships   TeamMembership[]
  projectMembersip  ProjectMembersip[]
}

model EmailConfirmation {
  token     String   @id
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model UserProfile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String
  lastName  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Team {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  name        String
  memberships TeamMembership[]
  projects    Project[]
}

model TeamMembership {
  id        String             @id @default(cuid())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  status    MembershipStatuses @default(PENDING)
  role      TeamRoles          @default(MEMBER)
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  team      Team               @relation(fields: [teamId], references: [id])
  teamId    String

  @@unique([userId, teamId])
}

model Project {
  id          String             @id @default(cuid())
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  name        String
  team        Team               @relation(fields: [teamId], references: [id])
  teamId      String
  memberships ProjectMembersip[]
}

model ProjectMembersip {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String

  @@unique([userId, projectId])
}

// ======================
// Config
// ======================

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// ======================
// Enums
// ======================

enum MemberRoles {
  ADMIN
  MEMBER
  BILLING
}

enum MembershipStatuses {
  PENDING
  ACCEPTED
  BANNED
}

enum ProjectRoles {
  ADMIN
  REVIEWER
  VIEWER
}

// ======================
// Models
// ======================

model User {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  confirmed         Boolean            @default(false)
  email             String             @unique
  //
  emailConfirmation EmailConfirmation?
  profile           UserProfile?
  teamMemberships   TeamMembership[]
  Invite            Invite[]
}

model EmailConfirmation {
  token     String   @id
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model UserProfile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String
  lastName  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Team {
  id          String           @id @default(cuid())
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  name        String
  memberships TeamMembership[]
  projects    Project[]
  invites     Invite[]
}

model TeamMembership {
  id                 String              @id @default(cuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  role               MemberRoles         @default(MEMBER)
  user               User                @relation(fields: [userId], references: [id])
  userId             String
  team               Team                @relation(fields: [teamId], references: [id])
  teamId             String
  // unused
  projectMemberships ProjectMembership[]

  @@unique([userId, teamId])
}

model Project {
  id          String              @id @default(cuid())
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  name        String
  team        Team                @relation(fields: [teamId], references: [id])
  teamId      String
  memberships ProjectMembership[]
}

model ProjectMembership {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         MemberRoles    @default(MEMBER)
  membership   TeamMembership @relation(fields: [membershipId], references: [id])
  membershipId String
  project      Project        @relation(fields: [projectId], references: [id])
  projectId    String

  @@unique([membershipId, projectId])
}

model Invite {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  email       String
  invitedBy   User     @relation(fields: [invitedById], references: [id])
  invitedById String
  team        Team?    @relation(fields: [teamId], references: [id])
  teamId      String?

  @@unique([email, teamId])
  @@index([email])
}

# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddMemberToProjectInput {
  projectId: String!
  teamMembershipId: String!
}

input CreateInviteInput {
  email: String!
  teamId: String!
}

input CreateProjectInput {
  name: String!
  teamId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Invite {
  createdAt: DateTime!
  email: String!
  id: ID!
  invitedBy: User!
  invitedById: String!
  team: Team!
  teamId: String!
}

enum MemberRoles {
  ADMIN
  BILLING
  MEMBER
}

type Mutation {
  acceptInvite(id: String!): Invite!
  addMemberToProject(input: AddMemberToProjectInput!): ProjectMembership!
  createInvite(input: CreateInviteInput!): Invite!
  createProject(input: CreateProjectInput!): Project!
  createTeam(name: String!): Team!
  deleteInvite(id: String!): Invite!
  login(email: String!, password: String!): User!
  logout: User!
  register(input: RegisterInput!): User!
  removeMemberFromProject(projectMembershipId: String!): ProjectMembership!
}

type Notification {
  createdAt: DateTime!
  id: ID!
  project: Project
  projectId: String
  seenAt: DateTime
  subject: User!
  subjectId: String!
  team: Team
  teamId: String
  type: NotificationTypes!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

enum NotificationTypes {
  NEW_TEAM_MEMBER
  PAYMENT_ACCEPTED
  PAYMENT_REJECTED
  REMOVED_FROM_PROJECT
  REMOVED_FROM_TEAM
  TEAM_INVITE
}

input PaginationInput {
  cursor: String
  skip: Int
  take: Int
}

type Project {
  createdAt: DateTime!
  currentMember: ProjectMembership!
  id: ID!
  memberships: [ProjectMembership!]!
  name: String!
  team: Team!
  teamId: String!
  updatedAt: DateTime!
}

type ProjectMembership {
  createdAt: DateTime!
  id: ID!
  membership: TeamMembership!
  membershipId: String!
  project: Project!
  projectId: String!
  role: MemberRoles!
  updatedAt: DateTime!
}

type Query {
  invites(teamId: String): [Invite!]!
  me: User!
  notifications(pagination: PaginationInput): [Notification!]!
  project(id: String!): Project!
  team(id: String!): Team!
  teamMembership(id: String!): TeamMembership!
  teamMemberships(pagination: PaginationInput, query: String): [TeamMembership!]!
  teams(pagination: PaginationInput): [Team!]!
}

input RegisterInput {
  confirmation: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type Subscription {
  onNewNotification: Notification!
}

type Team {
  createdAt: DateTime!
  id: ID!
  invites: [Invite!]!
  memberships: [TeamMembership!]!
  name: String!
  projects: [Project!]!
  updatedAt: DateTime!
}

type TeamMembership {
  createdAt: DateTime!
  id: ID!
  role: MemberRoles!
  team: Team!
  teamId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type User {
  confirmed: Boolean!
  createdAt: DateTime!
  email: String!
  id: ID!
  profile: UserProfile!
  updatedAt: DateTime!
}

type UserProfile {
  createdAt: DateTime!
  firstName: String!
  fullName: String
  id: ID!
  lastName: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

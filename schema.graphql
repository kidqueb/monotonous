### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AggregateBillingPlan {
  avg: BillingPlanAvgAggregateOutputType
  count: BillingPlanCountAggregateOutputType
  max: BillingPlanMaxAggregateOutputType
  min: BillingPlanMinAggregateOutputType
  sum: BillingPlanSumAggregateOutputType
}

type AggregateEmailConfirmation {
  count: EmailConfirmationCountAggregateOutputType
  max: EmailConfirmationMaxAggregateOutputType
  min: EmailConfirmationMinAggregateOutputType
}

type AggregateKey {
  count: KeyCountAggregateOutputType
  max: KeyMaxAggregateOutputType
  min: KeyMinAggregateOutputType
}

type AggregateMetadata {
  count: MetadataCountAggregateOutputType
  max: MetadataMaxAggregateOutputType
  min: MetadataMinAggregateOutputType
}

type AggregateProject {
  count: ProjectCountAggregateOutputType
  max: ProjectMaxAggregateOutputType
  min: ProjectMinAggregateOutputType
}

type AggregateProjectMembership {
  count: ProjectMembershipCountAggregateOutputType
  max: ProjectMembershipMaxAggregateOutputType
  min: ProjectMembershipMinAggregateOutputType
}

type AggregateReport {
  count: ReportCountAggregateOutputType
  max: ReportMaxAggregateOutputType
  min: ReportMinAggregateOutputType
}

type AggregateSubject {
  count: SubjectCountAggregateOutputType
  max: SubjectMaxAggregateOutputType
  min: SubjectMinAggregateOutputType
}

type AggregateTeam {
  count: TeamCountAggregateOutputType
  max: TeamMaxAggregateOutputType
  min: TeamMinAggregateOutputType
}

type AggregateTeamMembership {
  count: TeamMembershipCountAggregateOutputType
  max: TeamMembershipMaxAggregateOutputType
  min: TeamMembershipMinAggregateOutputType
}

type AggregateUser {
  count: UserCountAggregateOutputType
  max: UserMaxAggregateOutputType
  min: UserMinAggregateOutputType
}

type BatchPayload {
  count: Int!
}

enum BillingFrequencies {
  ANNUALLY
  MONTHLY
}

type BillingPlanAvgAggregateOutputType {
  cost: Float!
}

type BillingPlanCountAggregateOutputType {
  _all: Int!
  billingFrequency: Int
  cost: Int!
  createdAt: Int
  id: Int
  name: Int
  updatedAt: Int
}

input BillingPlanCreateInput {
  billingFrequency: BillingFrequencies!
  cost: Int!
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

type BillingPlanMaxAggregateOutputType {
  billingFrequency: BillingFrequencies
  cost: Int!
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type BillingPlanMinAggregateOutputType {
  billingFrequency: BillingFrequencies
  cost: Int!
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input BillingPlanOrderByInput {
  billingFrequency: SortOrder
  cost: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

enum BillingPlanScalarFieldEnum {
  billingFrequency
  cost
  createdAt
  id
  name
  updatedAt
}

type BillingPlanSumAggregateOutputType {
  cost: Int!
}

input BillingPlanUncheckedCreateInput {
  billingFrequency: BillingFrequencies!
  cost: Int!
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input BillingPlanUncheckedUpdateInput {
  billingFrequency: EnumBillingFrequenciesFieldUpdateOperationsInput
  cost: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BillingPlanUncheckedUpdateManyInput {
  billingFrequency: EnumBillingFrequenciesFieldUpdateOperationsInput
  cost: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BillingPlanUpdateInput {
  billingFrequency: EnumBillingFrequenciesFieldUpdateOperationsInput
  cost: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BillingPlanUpdateManyMutationInput {
  billingFrequency: EnumBillingFrequenciesFieldUpdateOperationsInput
  cost: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input BillingPlanWhereInput {
  AND: [BillingPlanWhereInput]
  NOT: [BillingPlanWhereInput]
  OR: [BillingPlanWhereInput]
  billingFrequency: EnumBillingFrequenciesFilter
  cost: IntFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input BillingPlanWhereUniqueInput {
  id: String
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

"""Date custom scalar type"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime]
}

"""Decimal custom scalar type"""
scalar Decimal

type EmailConfirmationCountAggregateOutputType {
  _all: Int!
  token: Int
  userId: Int
}

input EmailConfirmationCreateInput {
  token: String
  user: UserCreateNestedOneWithoutEmailConfirmationInput!
}

input EmailConfirmationCreateNestedOneWithoutUserInput {
  connect: EmailConfirmationWhereUniqueInput
  connectOrCreate: EmailConfirmationCreateOrConnectWithoutUserInput
  create: EmailConfirmationUncheckedCreateWithoutUserInput
}

input EmailConfirmationCreateOrConnectWithoutUserInput {
  create: EmailConfirmationUncheckedCreateWithoutUserInput!
  where: EmailConfirmationWhereUniqueInput!
}

input EmailConfirmationCreateWithoutUserInput {
  token: String
}

type EmailConfirmationMaxAggregateOutputType {
  token: String
  userId: String
}

type EmailConfirmationMinAggregateOutputType {
  token: String
  userId: String
}

input EmailConfirmationOrderByInput {
  token: SortOrder
  userId: SortOrder
}

input EmailConfirmationRelationFilter {
  is: EmailConfirmationWhereInput
  isNot: EmailConfirmationWhereInput
}

enum EmailConfirmationScalarFieldEnum {
  token
  userId
}

input EmailConfirmationUncheckedCreateInput {
  token: String
  userId: String!
}

input EmailConfirmationUncheckedCreateNestedOneWithoutUserInput {
  connect: EmailConfirmationWhereUniqueInput
  connectOrCreate: EmailConfirmationCreateOrConnectWithoutUserInput
  create: EmailConfirmationUncheckedCreateWithoutUserInput
}

input EmailConfirmationUncheckedCreateWithoutUserInput {
  token: String
}

input EmailConfirmationUncheckedUpdateInput {
  token: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input EmailConfirmationUncheckedUpdateManyInput {
  token: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input EmailConfirmationUncheckedUpdateOneWithoutUserInput {
  connect: EmailConfirmationWhereUniqueInput
  connectOrCreate: EmailConfirmationCreateOrConnectWithoutUserInput
  create: EmailConfirmationUncheckedCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: EmailConfirmationUncheckedUpdateWithoutUserInput
  upsert: EmailConfirmationUpsertWithoutUserInput
}

input EmailConfirmationUncheckedUpdateWithoutUserInput {
  token: StringFieldUpdateOperationsInput
}

input EmailConfirmationUpdateInput {
  token: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutEmailConfirmationInput
}

input EmailConfirmationUpdateManyMutationInput {
  token: StringFieldUpdateOperationsInput
}

input EmailConfirmationUpdateOneWithoutUserInput {
  connect: EmailConfirmationWhereUniqueInput
  connectOrCreate: EmailConfirmationCreateOrConnectWithoutUserInput
  create: EmailConfirmationUncheckedCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: EmailConfirmationUncheckedUpdateWithoutUserInput
  upsert: EmailConfirmationUpsertWithoutUserInput
}

input EmailConfirmationUpdateWithoutUserInput {
  token: StringFieldUpdateOperationsInput
}

input EmailConfirmationUpsertWithoutUserInput {
  create: EmailConfirmationUncheckedCreateWithoutUserInput!
  update: EmailConfirmationUncheckedUpdateWithoutUserInput!
}

input EmailConfirmationWhereInput {
  AND: [EmailConfirmationWhereInput]
  NOT: [EmailConfirmationWhereInput]
  OR: [EmailConfirmationWhereInput]
  token: StringFilter
  user: UserWhereInput
  userId: StringFilter
}

input EmailConfirmationWhereUniqueInput {
  token: String
  userId: String
}

input EnumBillingFrequenciesFieldUpdateOperationsInput {
  set: BillingFrequencies
}

input EnumBillingFrequenciesFilter {
  equals: BillingFrequencies
  in: [BillingFrequencies]
  not: NestedEnumBillingFrequenciesFilter
  notIn: [BillingFrequencies]
}

input EnumProjectRolesFieldUpdateOperationsInput {
  set: ProjectRoles
}

input EnumProjectRolesFilter {
  equals: ProjectRoles
  in: [ProjectRoles]
  not: NestedEnumProjectRolesFilter
  notIn: [ProjectRoles]
}

input EnumTeamRolesFieldUpdateOperationsInput {
  set: TeamRoles
}

input EnumTeamRolesFilter {
  equals: TeamRoles
  in: [TeamRoles]
  not: NestedEnumTeamRolesFilter
  notIn: [TeamRoles]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

"""Json custom scalar type"""
scalar Json

type KeyCountAggregateOutputType {
  _all: Int!
  createdAt: Int
  description: Int
  id: Int
  projectId: Int
  revokedAt: Int
  token: Int
}

input KeyCreateInput {
  createdAt: DateTime
  description: String!
  id: String
  project: ProjectCreateNestedOneWithoutKeysInput!
  revokedAt: DateTime
  token: String!
}

input KeyCreateNestedManyWithoutProjectInput {
  connect: [KeyWhereUniqueInput]
  connectOrCreate: [KeyCreateOrConnectWithoutProjectInput]
  create: [KeyCreateWithoutProjectInput]
}

input KeyCreateOrConnectWithoutProjectInput {
  create: KeyUncheckedCreateWithoutProjectInput!
  where: KeyWhereUniqueInput!
}

input KeyCreateWithoutProjectInput {
  createdAt: DateTime
  description: String!
  id: String
  revokedAt: DateTime
  token: String!
}

input KeyListRelationFilter {
  every: KeyWhereInput
  none: KeyWhereInput
  some: KeyWhereInput
}

type KeyMaxAggregateOutputType {
  createdAt: DateTime
  description: String
  id: String
  projectId: String
  revokedAt: DateTime
  token: String
}

type KeyMinAggregateOutputType {
  createdAt: DateTime
  description: String
  id: String
  projectId: String
  revokedAt: DateTime
  token: String
}

input KeyOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  project: ProjectOrderByInput
  projectId: SortOrder
  revokedAt: SortOrder
  token: SortOrder
}

enum KeyScalarFieldEnum {
  createdAt
  description
  id
  projectId
  revokedAt
  token
}

input KeyScalarWhereInput {
  AND: [KeyScalarWhereInput]
  NOT: [KeyScalarWhereInput]
  OR: [KeyScalarWhereInput]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  projectId: StringFilter
  revokedAt: DateTimeNullableFilter
  token: StringFilter
}

input KeyUncheckedCreateInput {
  createdAt: DateTime
  description: String!
  id: String
  projectId: String!
  revokedAt: DateTime
  token: String!
}

input KeyUncheckedCreateNestedManyWithoutProjectInput {
  connect: [KeyWhereUniqueInput]
  connectOrCreate: [KeyCreateOrConnectWithoutProjectInput]
  create: [KeyCreateWithoutProjectInput]
}

input KeyUncheckedCreateWithoutProjectInput {
  createdAt: DateTime
  description: String!
  id: String
  revokedAt: DateTime
  token: String!
}

input KeyUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  projectId: StringFieldUpdateOperationsInput
  revokedAt: NullableDateTimeFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input KeyUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  projectId: StringFieldUpdateOperationsInput
  revokedAt: NullableDateTimeFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input KeyUncheckedUpdateManyWithoutKeysInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  revokedAt: NullableDateTimeFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input KeyUncheckedUpdateManyWithoutProjectInput {
  connect: [KeyWhereUniqueInput]
  connectOrCreate: [KeyCreateOrConnectWithoutProjectInput]
  create: [KeyCreateWithoutProjectInput]
  delete: [KeyWhereUniqueInput]
  deleteMany: [KeyScalarWhereInput]
  disconnect: [KeyWhereUniqueInput]
  set: [KeyWhereUniqueInput]
  update: [KeyUpdateWithWhereUniqueWithoutProjectInput]
  updateMany: [KeyUpdateManyWithWhereWithoutProjectInput]
  upsert: [KeyUpsertWithWhereUniqueWithoutProjectInput]
}

input KeyUncheckedUpdateWithoutProjectInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  revokedAt: NullableDateTimeFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input KeyUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutKeysInput
  revokedAt: NullableDateTimeFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input KeyUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  revokedAt: NullableDateTimeFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input KeyUpdateManyWithWhereWithoutProjectInput {
  data: KeyUncheckedUpdateManyWithoutKeysInput!
  where: KeyScalarWhereInput!
}

input KeyUpdateManyWithoutProjectInput {
  connect: [KeyWhereUniqueInput]
  connectOrCreate: [KeyCreateOrConnectWithoutProjectInput]
  create: [KeyCreateWithoutProjectInput]
  delete: [KeyWhereUniqueInput]
  deleteMany: [KeyScalarWhereInput]
  disconnect: [KeyWhereUniqueInput]
  set: [KeyWhereUniqueInput]
  update: [KeyUpdateWithWhereUniqueWithoutProjectInput]
  updateMany: [KeyUpdateManyWithWhereWithoutProjectInput]
  upsert: [KeyUpsertWithWhereUniqueWithoutProjectInput]
}

input KeyUpdateWithWhereUniqueWithoutProjectInput {
  data: KeyUncheckedUpdateWithoutProjectInput!
  where: KeyWhereUniqueInput!
}

input KeyUpdateWithoutProjectInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  revokedAt: NullableDateTimeFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input KeyUpsertWithWhereUniqueWithoutProjectInput {
  create: KeyUncheckedCreateWithoutProjectInput!
  update: KeyUncheckedUpdateWithoutProjectInput!
  where: KeyWhereUniqueInput!
}

input KeyWhereInput {
  AND: [KeyWhereInput]
  NOT: [KeyWhereInput]
  OR: [KeyWhereInput]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  project: ProjectWhereInput
  projectId: StringFilter
  revokedAt: DateTimeNullableFilter
  token: StringFilter
}

input KeyWhereUniqueInput {
  id: String
}

type MetadataCountAggregateOutputType {
  _all: Int!
  id: Int
  key: Int
  reportId: Int
  value: Int
}

input MetadataCreateInput {
  id: String
  key: String!
  report: ReportCreateNestedOneWithoutMetadataInput!
  value: String!
}

input MetadataCreateNestedManyWithoutReportInput {
  connect: [MetadataWhereUniqueInput]
  connectOrCreate: [MetadataCreateOrConnectWithoutReportInput]
  create: [MetadataCreateWithoutReportInput]
}

input MetadataCreateOrConnectWithoutReportInput {
  create: MetadataUncheckedCreateWithoutReportInput!
  where: MetadataWhereUniqueInput!
}

input MetadataCreateWithoutReportInput {
  id: String
  key: String!
  value: String!
}

input MetadataListRelationFilter {
  every: MetadataWhereInput
  none: MetadataWhereInput
  some: MetadataWhereInput
}

type MetadataMaxAggregateOutputType {
  id: String
  key: String
  reportId: String
  value: String
}

type MetadataMinAggregateOutputType {
  id: String
  key: String
  reportId: String
  value: String
}

input MetadataOrderByInput {
  id: SortOrder
  key: SortOrder
  report: ReportOrderByInput
  reportId: SortOrder
  value: SortOrder
}

input MetadataReportIdKeyCompoundUniqueInput {
  key: String!
  reportId: String!
}

enum MetadataScalarFieldEnum {
  id
  key
  reportId
  value
}

input MetadataScalarWhereInput {
  AND: [MetadataScalarWhereInput]
  NOT: [MetadataScalarWhereInput]
  OR: [MetadataScalarWhereInput]
  id: StringFilter
  key: StringFilter
  reportId: StringFilter
  value: StringFilter
}

input MetadataUncheckedCreateInput {
  id: String
  key: String!
  reportId: String!
  value: String!
}

input MetadataUncheckedCreateNestedManyWithoutReportInput {
  connect: [MetadataWhereUniqueInput]
  connectOrCreate: [MetadataCreateOrConnectWithoutReportInput]
  create: [MetadataCreateWithoutReportInput]
}

input MetadataUncheckedCreateWithoutReportInput {
  id: String
  key: String!
  value: String!
}

input MetadataUncheckedUpdateInput {
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  reportId: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input MetadataUncheckedUpdateManyInput {
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  reportId: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input MetadataUncheckedUpdateManyWithoutMetadataInput {
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input MetadataUncheckedUpdateManyWithoutReportInput {
  connect: [MetadataWhereUniqueInput]
  connectOrCreate: [MetadataCreateOrConnectWithoutReportInput]
  create: [MetadataCreateWithoutReportInput]
  delete: [MetadataWhereUniqueInput]
  deleteMany: [MetadataScalarWhereInput]
  disconnect: [MetadataWhereUniqueInput]
  set: [MetadataWhereUniqueInput]
  update: [MetadataUpdateWithWhereUniqueWithoutReportInput]
  updateMany: [MetadataUpdateManyWithWhereWithoutReportInput]
  upsert: [MetadataUpsertWithWhereUniqueWithoutReportInput]
}

input MetadataUncheckedUpdateWithoutReportInput {
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input MetadataUpdateInput {
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  report: ReportUpdateOneRequiredWithoutMetadataInput
  value: StringFieldUpdateOperationsInput
}

input MetadataUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input MetadataUpdateManyWithWhereWithoutReportInput {
  data: MetadataUncheckedUpdateManyWithoutMetadataInput!
  where: MetadataScalarWhereInput!
}

input MetadataUpdateManyWithoutReportInput {
  connect: [MetadataWhereUniqueInput]
  connectOrCreate: [MetadataCreateOrConnectWithoutReportInput]
  create: [MetadataCreateWithoutReportInput]
  delete: [MetadataWhereUniqueInput]
  deleteMany: [MetadataScalarWhereInput]
  disconnect: [MetadataWhereUniqueInput]
  set: [MetadataWhereUniqueInput]
  update: [MetadataUpdateWithWhereUniqueWithoutReportInput]
  updateMany: [MetadataUpdateManyWithWhereWithoutReportInput]
  upsert: [MetadataUpsertWithWhereUniqueWithoutReportInput]
}

input MetadataUpdateWithWhereUniqueWithoutReportInput {
  data: MetadataUncheckedUpdateWithoutReportInput!
  where: MetadataWhereUniqueInput!
}

input MetadataUpdateWithoutReportInput {
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
}

input MetadataUpsertWithWhereUniqueWithoutReportInput {
  create: MetadataUncheckedCreateWithoutReportInput!
  update: MetadataUncheckedUpdateWithoutReportInput!
  where: MetadataWhereUniqueInput!
}

input MetadataWhereInput {
  AND: [MetadataWhereInput]
  NOT: [MetadataWhereInput]
  OR: [MetadataWhereInput]
  id: StringFilter
  key: StringFilter
  report: ReportWhereInput
  reportId: StringFilter
  value: StringFilter
}

input MetadataWhereUniqueInput {
  id: String
  reportId_key: MetadataReportIdKeyCompoundUniqueInput
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime]
}

input NestedEnumBillingFrequenciesFilter {
  equals: BillingFrequencies
  in: [BillingFrequencies]
  not: NestedEnumBillingFrequenciesFilter
  notIn: [BillingFrequencies]
}

input NestedEnumProjectRolesFilter {
  equals: ProjectRoles
  in: [ProjectRoles]
  not: NestedEnumProjectRolesFilter
  notIn: [ProjectRoles]
}

input NestedEnumTeamRolesFilter {
  equals: TeamRoles
  in: [TeamRoles]
  not: NestedEnumTeamRolesFilter
  notIn: [TeamRoles]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type ProjectCountAggregateOutputType {
  _all: Int!
  createdAt: Int
  id: Int
  name: Int
  teamId: Int
  updatedAt: Int
}

input ProjectCreateInput {
  createdAt: DateTime
  id: String
  keys: KeyCreateNestedManyWithoutProjectInput
  memberships: ProjectMembershipCreateNestedManyWithoutProjectInput
  name: String!
  reports: ReportCreateNestedManyWithoutProjectInput
  subjects: SubjectCreateNestedManyWithoutProjectInput
  team: TeamCreateNestedOneWithoutProjectsInput!
  updatedAt: DateTime
}

input ProjectCreateNestedManyWithoutTeamInput {
  connect: [ProjectWhereUniqueInput]
  connectOrCreate: [ProjectCreateOrConnectWithoutTeamInput]
  create: [ProjectCreateWithoutTeamInput]
}

input ProjectCreateNestedOneWithoutKeysInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutKeysInput
  create: ProjectUncheckedCreateWithoutKeysInput
}

input ProjectCreateNestedOneWithoutMembershipsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutMembershipsInput
  create: ProjectUncheckedCreateWithoutMembershipsInput
}

input ProjectCreateNestedOneWithoutReportsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutReportsInput
  create: ProjectUncheckedCreateWithoutReportsInput
}

input ProjectCreateNestedOneWithoutSubjectsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutSubjectsInput
  create: ProjectUncheckedCreateWithoutSubjectsInput
}

input ProjectCreateOrConnectWithoutKeysInput {
  create: ProjectUncheckedCreateWithoutKeysInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutMembershipsInput {
  create: ProjectUncheckedCreateWithoutMembershipsInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutReportsInput {
  create: ProjectUncheckedCreateWithoutReportsInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutSubjectsInput {
  create: ProjectUncheckedCreateWithoutSubjectsInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutTeamInput {
  create: ProjectUncheckedCreateWithoutTeamInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateWithoutKeysInput {
  createdAt: DateTime
  id: String
  memberships: ProjectMembershipCreateNestedManyWithoutProjectInput
  name: String!
  reports: ReportCreateNestedManyWithoutProjectInput
  subjects: SubjectCreateNestedManyWithoutProjectInput
  team: TeamCreateNestedOneWithoutProjectsInput!
  updatedAt: DateTime
}

input ProjectCreateWithoutMembershipsInput {
  createdAt: DateTime
  id: String
  keys: KeyCreateNestedManyWithoutProjectInput
  name: String!
  reports: ReportCreateNestedManyWithoutProjectInput
  subjects: SubjectCreateNestedManyWithoutProjectInput
  team: TeamCreateNestedOneWithoutProjectsInput!
  updatedAt: DateTime
}

input ProjectCreateWithoutReportsInput {
  createdAt: DateTime
  id: String
  keys: KeyCreateNestedManyWithoutProjectInput
  memberships: ProjectMembershipCreateNestedManyWithoutProjectInput
  name: String!
  subjects: SubjectCreateNestedManyWithoutProjectInput
  team: TeamCreateNestedOneWithoutProjectsInput!
  updatedAt: DateTime
}

input ProjectCreateWithoutSubjectsInput {
  createdAt: DateTime
  id: String
  keys: KeyCreateNestedManyWithoutProjectInput
  memberships: ProjectMembershipCreateNestedManyWithoutProjectInput
  name: String!
  reports: ReportCreateNestedManyWithoutProjectInput
  team: TeamCreateNestedOneWithoutProjectsInput!
  updatedAt: DateTime
}

input ProjectCreateWithoutTeamInput {
  createdAt: DateTime
  id: String
  keys: KeyCreateNestedManyWithoutProjectInput
  memberships: ProjectMembershipCreateNestedManyWithoutProjectInput
  name: String!
  reports: ReportCreateNestedManyWithoutProjectInput
  subjects: SubjectCreateNestedManyWithoutProjectInput
  updatedAt: DateTime
}

input ProjectListRelationFilter {
  every: ProjectWhereInput
  none: ProjectWhereInput
  some: ProjectWhereInput
}

type ProjectMaxAggregateOutputType {
  createdAt: DateTime
  id: String
  name: String
  teamId: String
  updatedAt: DateTime
}

type ProjectMembershipCountAggregateOutputType {
  _all: Int!
  createdAt: Int
  id: Int
  projectId: Int
  role: Int
  updatedAt: Int
  userId: Int
}

input ProjectMembershipCreateInput {
  createdAt: DateTime
  id: String
  project: ProjectCreateNestedOneWithoutMembershipsInput!
  reviewedReports: ReportCreateNestedManyWithoutReviewerInput
  role: ProjectRoles
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutProjectMembershipsInput!
}

input ProjectMembershipCreateNestedManyWithoutProjectInput {
  connect: [ProjectMembershipWhereUniqueInput]
  connectOrCreate: [ProjectMembershipCreateOrConnectWithoutProjectInput]
  create: [ProjectMembershipCreateWithoutProjectInput]
}

input ProjectMembershipCreateNestedManyWithoutUserInput {
  connect: [ProjectMembershipWhereUniqueInput]
  connectOrCreate: [ProjectMembershipCreateOrConnectWithoutUserInput]
  create: [ProjectMembershipCreateWithoutUserInput]
}

input ProjectMembershipCreateNestedOneWithoutReviewedReportsInput {
  connect: ProjectMembershipWhereUniqueInput
  connectOrCreate: ProjectMembershipCreateOrConnectWithoutReviewedReportsInput
  create: ProjectMembershipUncheckedCreateWithoutReviewedReportsInput
}

input ProjectMembershipCreateOrConnectWithoutProjectInput {
  create: ProjectMembershipUncheckedCreateWithoutProjectInput!
  where: ProjectMembershipWhereUniqueInput!
}

input ProjectMembershipCreateOrConnectWithoutReviewedReportsInput {
  create: ProjectMembershipUncheckedCreateWithoutReviewedReportsInput!
  where: ProjectMembershipWhereUniqueInput!
}

input ProjectMembershipCreateOrConnectWithoutUserInput {
  create: ProjectMembershipUncheckedCreateWithoutUserInput!
  where: ProjectMembershipWhereUniqueInput!
}

input ProjectMembershipCreateWithoutProjectInput {
  createdAt: DateTime
  id: String
  reviewedReports: ReportCreateNestedManyWithoutReviewerInput
  role: ProjectRoles
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutProjectMembershipsInput!
}

input ProjectMembershipCreateWithoutReviewedReportsInput {
  createdAt: DateTime
  id: String
  project: ProjectCreateNestedOneWithoutMembershipsInput!
  role: ProjectRoles
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutProjectMembershipsInput!
}

input ProjectMembershipCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  project: ProjectCreateNestedOneWithoutMembershipsInput!
  reviewedReports: ReportCreateNestedManyWithoutReviewerInput
  role: ProjectRoles
  updatedAt: DateTime
}

input ProjectMembershipListRelationFilter {
  every: ProjectMembershipWhereInput
  none: ProjectMembershipWhereInput
  some: ProjectMembershipWhereInput
}

type ProjectMembershipMaxAggregateOutputType {
  createdAt: DateTime
  id: String
  projectId: String
  role: ProjectRoles
  updatedAt: DateTime
  userId: String
}

type ProjectMembershipMinAggregateOutputType {
  createdAt: DateTime
  id: String
  projectId: String
  role: ProjectRoles
  updatedAt: DateTime
  userId: String
}

input ProjectMembershipOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  project: ProjectOrderByInput
  projectId: SortOrder
  role: SortOrder
  updatedAt: SortOrder
  user: UserOrderByInput
  userId: SortOrder
}

input ProjectMembershipRelationFilter {
  is: ProjectMembershipWhereInput
  isNot: ProjectMembershipWhereInput
}

enum ProjectMembershipScalarFieldEnum {
  createdAt
  id
  projectId
  role
  updatedAt
  userId
}

input ProjectMembershipScalarWhereInput {
  AND: [ProjectMembershipScalarWhereInput]
  NOT: [ProjectMembershipScalarWhereInput]
  OR: [ProjectMembershipScalarWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  projectId: StringFilter
  role: EnumProjectRolesFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input ProjectMembershipUncheckedCreateInput {
  createdAt: DateTime
  id: String
  projectId: String!
  reviewedReports: ReportUncheckedCreateNestedManyWithoutReviewerInput
  role: ProjectRoles
  updatedAt: DateTime
  userId: String!
}

input ProjectMembershipUncheckedCreateNestedManyWithoutProjectInput {
  connect: [ProjectMembershipWhereUniqueInput]
  connectOrCreate: [ProjectMembershipCreateOrConnectWithoutProjectInput]
  create: [ProjectMembershipCreateWithoutProjectInput]
}

input ProjectMembershipUncheckedCreateNestedManyWithoutUserInput {
  connect: [ProjectMembershipWhereUniqueInput]
  connectOrCreate: [ProjectMembershipCreateOrConnectWithoutUserInput]
  create: [ProjectMembershipCreateWithoutUserInput]
}

input ProjectMembershipUncheckedCreateWithoutProjectInput {
  createdAt: DateTime
  id: String
  reviewedReports: ReportUncheckedCreateNestedManyWithoutReviewerInput
  role: ProjectRoles
  updatedAt: DateTime
  userId: String!
}

input ProjectMembershipUncheckedCreateWithoutReviewedReportsInput {
  createdAt: DateTime
  id: String
  projectId: String!
  role: ProjectRoles
  updatedAt: DateTime
  userId: String!
}

input ProjectMembershipUncheckedCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  projectId: String!
  reviewedReports: ReportUncheckedCreateNestedManyWithoutReviewerInput
  role: ProjectRoles
  updatedAt: DateTime
}

input ProjectMembershipUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  projectId: StringFieldUpdateOperationsInput
  reviewedReports: ReportUncheckedUpdateManyWithoutReviewerInput
  role: EnumProjectRolesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input ProjectMembershipUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  projectId: StringFieldUpdateOperationsInput
  role: EnumProjectRolesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input ProjectMembershipUncheckedUpdateManyWithoutMembershipsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumProjectRolesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input ProjectMembershipUncheckedUpdateManyWithoutProjectInput {
  connect: [ProjectMembershipWhereUniqueInput]
  connectOrCreate: [ProjectMembershipCreateOrConnectWithoutProjectInput]
  create: [ProjectMembershipCreateWithoutProjectInput]
  delete: [ProjectMembershipWhereUniqueInput]
  deleteMany: [ProjectMembershipScalarWhereInput]
  disconnect: [ProjectMembershipWhereUniqueInput]
  set: [ProjectMembershipWhereUniqueInput]
  update: [ProjectMembershipUpdateWithWhereUniqueWithoutProjectInput]
  updateMany: [ProjectMembershipUpdateManyWithWhereWithoutProjectInput]
  upsert: [ProjectMembershipUpsertWithWhereUniqueWithoutProjectInput]
}

input ProjectMembershipUncheckedUpdateManyWithoutProjectMembershipsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  projectId: StringFieldUpdateOperationsInput
  role: EnumProjectRolesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectMembershipUncheckedUpdateManyWithoutUserInput {
  connect: [ProjectMembershipWhereUniqueInput]
  connectOrCreate: [ProjectMembershipCreateOrConnectWithoutUserInput]
  create: [ProjectMembershipCreateWithoutUserInput]
  delete: [ProjectMembershipWhereUniqueInput]
  deleteMany: [ProjectMembershipScalarWhereInput]
  disconnect: [ProjectMembershipWhereUniqueInput]
  set: [ProjectMembershipWhereUniqueInput]
  update: [ProjectMembershipUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ProjectMembershipUpdateManyWithWhereWithoutUserInput]
  upsert: [ProjectMembershipUpsertWithWhereUniqueWithoutUserInput]
}

input ProjectMembershipUncheckedUpdateWithoutProjectInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  reviewedReports: ReportUncheckedUpdateManyWithoutReviewerInput
  role: EnumProjectRolesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input ProjectMembershipUncheckedUpdateWithoutReviewedReportsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  projectId: StringFieldUpdateOperationsInput
  role: EnumProjectRolesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input ProjectMembershipUncheckedUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  projectId: StringFieldUpdateOperationsInput
  reviewedReports: ReportUncheckedUpdateManyWithoutReviewerInput
  role: EnumProjectRolesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectMembershipUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMembershipsInput
  reviewedReports: ReportUpdateManyWithoutReviewerInput
  role: EnumProjectRolesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProjectMembershipsInput
}

input ProjectMembershipUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumProjectRolesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectMembershipUpdateManyWithWhereWithoutProjectInput {
  data: ProjectMembershipUncheckedUpdateManyWithoutMembershipsInput!
  where: ProjectMembershipScalarWhereInput!
}

input ProjectMembershipUpdateManyWithWhereWithoutUserInput {
  data: ProjectMembershipUncheckedUpdateManyWithoutProjectMembershipsInput!
  where: ProjectMembershipScalarWhereInput!
}

input ProjectMembershipUpdateManyWithoutProjectInput {
  connect: [ProjectMembershipWhereUniqueInput]
  connectOrCreate: [ProjectMembershipCreateOrConnectWithoutProjectInput]
  create: [ProjectMembershipCreateWithoutProjectInput]
  delete: [ProjectMembershipWhereUniqueInput]
  deleteMany: [ProjectMembershipScalarWhereInput]
  disconnect: [ProjectMembershipWhereUniqueInput]
  set: [ProjectMembershipWhereUniqueInput]
  update: [ProjectMembershipUpdateWithWhereUniqueWithoutProjectInput]
  updateMany: [ProjectMembershipUpdateManyWithWhereWithoutProjectInput]
  upsert: [ProjectMembershipUpsertWithWhereUniqueWithoutProjectInput]
}

input ProjectMembershipUpdateManyWithoutUserInput {
  connect: [ProjectMembershipWhereUniqueInput]
  connectOrCreate: [ProjectMembershipCreateOrConnectWithoutUserInput]
  create: [ProjectMembershipCreateWithoutUserInput]
  delete: [ProjectMembershipWhereUniqueInput]
  deleteMany: [ProjectMembershipScalarWhereInput]
  disconnect: [ProjectMembershipWhereUniqueInput]
  set: [ProjectMembershipWhereUniqueInput]
  update: [ProjectMembershipUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ProjectMembershipUpdateManyWithWhereWithoutUserInput]
  upsert: [ProjectMembershipUpsertWithWhereUniqueWithoutUserInput]
}

input ProjectMembershipUpdateOneRequiredWithoutReviewedReportsInput {
  connect: ProjectMembershipWhereUniqueInput
  connectOrCreate: ProjectMembershipCreateOrConnectWithoutReviewedReportsInput
  create: ProjectMembershipUncheckedCreateWithoutReviewedReportsInput
  update: ProjectMembershipUncheckedUpdateWithoutReviewedReportsInput
  upsert: ProjectMembershipUpsertWithoutReviewedReportsInput
}

input ProjectMembershipUpdateWithWhereUniqueWithoutProjectInput {
  data: ProjectMembershipUncheckedUpdateWithoutProjectInput!
  where: ProjectMembershipWhereUniqueInput!
}

input ProjectMembershipUpdateWithWhereUniqueWithoutUserInput {
  data: ProjectMembershipUncheckedUpdateWithoutUserInput!
  where: ProjectMembershipWhereUniqueInput!
}

input ProjectMembershipUpdateWithoutProjectInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  reviewedReports: ReportUpdateManyWithoutReviewerInput
  role: EnumProjectRolesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProjectMembershipsInput
}

input ProjectMembershipUpdateWithoutReviewedReportsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMembershipsInput
  role: EnumProjectRolesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProjectMembershipsInput
}

input ProjectMembershipUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMembershipsInput
  reviewedReports: ReportUpdateManyWithoutReviewerInput
  role: EnumProjectRolesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectMembershipUpsertWithWhereUniqueWithoutProjectInput {
  create: ProjectMembershipUncheckedCreateWithoutProjectInput!
  update: ProjectMembershipUncheckedUpdateWithoutProjectInput!
  where: ProjectMembershipWhereUniqueInput!
}

input ProjectMembershipUpsertWithWhereUniqueWithoutUserInput {
  create: ProjectMembershipUncheckedCreateWithoutUserInput!
  update: ProjectMembershipUncheckedUpdateWithoutUserInput!
  where: ProjectMembershipWhereUniqueInput!
}

input ProjectMembershipUpsertWithoutReviewedReportsInput {
  create: ProjectMembershipUncheckedCreateWithoutReviewedReportsInput!
  update: ProjectMembershipUncheckedUpdateWithoutReviewedReportsInput!
}

input ProjectMembershipUserIdProjectIdCompoundUniqueInput {
  projectId: String!
  userId: String!
}

input ProjectMembershipWhereInput {
  AND: [ProjectMembershipWhereInput]
  NOT: [ProjectMembershipWhereInput]
  OR: [ProjectMembershipWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  project: ProjectWhereInput
  projectId: StringFilter
  reviewedReports: ReportListRelationFilter
  role: EnumProjectRolesFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input ProjectMembershipWhereUniqueInput {
  id: String
  userId_projectId: ProjectMembershipUserIdProjectIdCompoundUniqueInput
}

type ProjectMinAggregateOutputType {
  createdAt: DateTime
  id: String
  name: String
  teamId: String
  updatedAt: DateTime
}

input ProjectOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  team: TeamOrderByInput
  teamId: SortOrder
  updatedAt: SortOrder
}

input ProjectRelationFilter {
  is: ProjectWhereInput
  isNot: ProjectWhereInput
}

enum ProjectRoles {
  ADMIN
  REVIEWER
  VIEWER
}

enum ProjectScalarFieldEnum {
  createdAt
  id
  name
  teamId
  updatedAt
}

input ProjectScalarWhereInput {
  AND: [ProjectScalarWhereInput]
  NOT: [ProjectScalarWhereInput]
  OR: [ProjectScalarWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  teamId: StringFilter
  updatedAt: DateTimeFilter
}

input ProjectTeamIdNameCompoundUniqueInput {
  name: String!
  teamId: String!
}

input ProjectUncheckedCreateInput {
  createdAt: DateTime
  id: String
  keys: KeyUncheckedCreateNestedManyWithoutProjectInput
  memberships: ProjectMembershipUncheckedCreateNestedManyWithoutProjectInput
  name: String!
  reports: ReportUncheckedCreateNestedManyWithoutProjectInput
  subjects: SubjectUncheckedCreateNestedManyWithoutProjectInput
  teamId: String!
  updatedAt: DateTime
}

input ProjectUncheckedCreateNestedManyWithoutTeamInput {
  connect: [ProjectWhereUniqueInput]
  connectOrCreate: [ProjectCreateOrConnectWithoutTeamInput]
  create: [ProjectCreateWithoutTeamInput]
}

input ProjectUncheckedCreateWithoutKeysInput {
  createdAt: DateTime
  id: String
  memberships: ProjectMembershipUncheckedCreateNestedManyWithoutProjectInput
  name: String!
  reports: ReportUncheckedCreateNestedManyWithoutProjectInput
  subjects: SubjectUncheckedCreateNestedManyWithoutProjectInput
  teamId: String!
  updatedAt: DateTime
}

input ProjectUncheckedCreateWithoutMembershipsInput {
  createdAt: DateTime
  id: String
  keys: KeyUncheckedCreateNestedManyWithoutProjectInput
  name: String!
  reports: ReportUncheckedCreateNestedManyWithoutProjectInput
  subjects: SubjectUncheckedCreateNestedManyWithoutProjectInput
  teamId: String!
  updatedAt: DateTime
}

input ProjectUncheckedCreateWithoutReportsInput {
  createdAt: DateTime
  id: String
  keys: KeyUncheckedCreateNestedManyWithoutProjectInput
  memberships: ProjectMembershipUncheckedCreateNestedManyWithoutProjectInput
  name: String!
  subjects: SubjectUncheckedCreateNestedManyWithoutProjectInput
  teamId: String!
  updatedAt: DateTime
}

input ProjectUncheckedCreateWithoutSubjectsInput {
  createdAt: DateTime
  id: String
  keys: KeyUncheckedCreateNestedManyWithoutProjectInput
  memberships: ProjectMembershipUncheckedCreateNestedManyWithoutProjectInput
  name: String!
  reports: ReportUncheckedCreateNestedManyWithoutProjectInput
  teamId: String!
  updatedAt: DateTime
}

input ProjectUncheckedCreateWithoutTeamInput {
  createdAt: DateTime
  id: String
  keys: KeyUncheckedCreateNestedManyWithoutProjectInput
  memberships: ProjectMembershipUncheckedCreateNestedManyWithoutProjectInput
  name: String!
  reports: ReportUncheckedCreateNestedManyWithoutProjectInput
  subjects: SubjectUncheckedCreateNestedManyWithoutProjectInput
  updatedAt: DateTime
}

input ProjectUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keys: KeyUncheckedUpdateManyWithoutProjectInput
  memberships: ProjectMembershipUncheckedUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  reports: ReportUncheckedUpdateManyWithoutProjectInput
  subjects: SubjectUncheckedUpdateManyWithoutProjectInput
  teamId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  teamId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUncheckedUpdateManyWithoutProjectsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUncheckedUpdateManyWithoutTeamInput {
  connect: [ProjectWhereUniqueInput]
  connectOrCreate: [ProjectCreateOrConnectWithoutTeamInput]
  create: [ProjectCreateWithoutTeamInput]
  delete: [ProjectWhereUniqueInput]
  deleteMany: [ProjectScalarWhereInput]
  disconnect: [ProjectWhereUniqueInput]
  set: [ProjectWhereUniqueInput]
  update: [ProjectUpdateWithWhereUniqueWithoutTeamInput]
  updateMany: [ProjectUpdateManyWithWhereWithoutTeamInput]
  upsert: [ProjectUpsertWithWhereUniqueWithoutTeamInput]
}

input ProjectUncheckedUpdateWithoutKeysInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  memberships: ProjectMembershipUncheckedUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  reports: ReportUncheckedUpdateManyWithoutProjectInput
  subjects: SubjectUncheckedUpdateManyWithoutProjectInput
  teamId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUncheckedUpdateWithoutMembershipsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keys: KeyUncheckedUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  reports: ReportUncheckedUpdateManyWithoutProjectInput
  subjects: SubjectUncheckedUpdateManyWithoutProjectInput
  teamId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUncheckedUpdateWithoutReportsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keys: KeyUncheckedUpdateManyWithoutProjectInput
  memberships: ProjectMembershipUncheckedUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  subjects: SubjectUncheckedUpdateManyWithoutProjectInput
  teamId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUncheckedUpdateWithoutSubjectsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keys: KeyUncheckedUpdateManyWithoutProjectInput
  memberships: ProjectMembershipUncheckedUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  reports: ReportUncheckedUpdateManyWithoutProjectInput
  teamId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUncheckedUpdateWithoutTeamInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keys: KeyUncheckedUpdateManyWithoutProjectInput
  memberships: ProjectMembershipUncheckedUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  reports: ReportUncheckedUpdateManyWithoutProjectInput
  subjects: SubjectUncheckedUpdateManyWithoutProjectInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keys: KeyUpdateManyWithoutProjectInput
  memberships: ProjectMembershipUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  reports: ReportUpdateManyWithoutProjectInput
  subjects: SubjectUpdateManyWithoutProjectInput
  team: TeamUpdateOneRequiredWithoutProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyWithWhereWithoutTeamInput {
  data: ProjectUncheckedUpdateManyWithoutProjectsInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateManyWithoutTeamInput {
  connect: [ProjectWhereUniqueInput]
  connectOrCreate: [ProjectCreateOrConnectWithoutTeamInput]
  create: [ProjectCreateWithoutTeamInput]
  delete: [ProjectWhereUniqueInput]
  deleteMany: [ProjectScalarWhereInput]
  disconnect: [ProjectWhereUniqueInput]
  set: [ProjectWhereUniqueInput]
  update: [ProjectUpdateWithWhereUniqueWithoutTeamInput]
  updateMany: [ProjectUpdateManyWithWhereWithoutTeamInput]
  upsert: [ProjectUpsertWithWhereUniqueWithoutTeamInput]
}

input ProjectUpdateOneRequiredWithoutKeysInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutKeysInput
  create: ProjectUncheckedCreateWithoutKeysInput
  update: ProjectUncheckedUpdateWithoutKeysInput
  upsert: ProjectUpsertWithoutKeysInput
}

input ProjectUpdateOneRequiredWithoutMembershipsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutMembershipsInput
  create: ProjectUncheckedCreateWithoutMembershipsInput
  update: ProjectUncheckedUpdateWithoutMembershipsInput
  upsert: ProjectUpsertWithoutMembershipsInput
}

input ProjectUpdateOneRequiredWithoutReportsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutReportsInput
  create: ProjectUncheckedCreateWithoutReportsInput
  update: ProjectUncheckedUpdateWithoutReportsInput
  upsert: ProjectUpsertWithoutReportsInput
}

input ProjectUpdateOneRequiredWithoutSubjectsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutSubjectsInput
  create: ProjectUncheckedCreateWithoutSubjectsInput
  update: ProjectUncheckedUpdateWithoutSubjectsInput
  upsert: ProjectUpsertWithoutSubjectsInput
}

input ProjectUpdateWithWhereUniqueWithoutTeamInput {
  data: ProjectUncheckedUpdateWithoutTeamInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithoutKeysInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  memberships: ProjectMembershipUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  reports: ReportUpdateManyWithoutProjectInput
  subjects: SubjectUpdateManyWithoutProjectInput
  team: TeamUpdateOneRequiredWithoutProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithoutMembershipsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keys: KeyUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  reports: ReportUpdateManyWithoutProjectInput
  subjects: SubjectUpdateManyWithoutProjectInput
  team: TeamUpdateOneRequiredWithoutProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithoutReportsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keys: KeyUpdateManyWithoutProjectInput
  memberships: ProjectMembershipUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  subjects: SubjectUpdateManyWithoutProjectInput
  team: TeamUpdateOneRequiredWithoutProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithoutSubjectsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keys: KeyUpdateManyWithoutProjectInput
  memberships: ProjectMembershipUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  reports: ReportUpdateManyWithoutProjectInput
  team: TeamUpdateOneRequiredWithoutProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithoutTeamInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keys: KeyUpdateManyWithoutProjectInput
  memberships: ProjectMembershipUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  reports: ReportUpdateManyWithoutProjectInput
  subjects: SubjectUpdateManyWithoutProjectInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpsertWithWhereUniqueWithoutTeamInput {
  create: ProjectUncheckedCreateWithoutTeamInput!
  update: ProjectUncheckedUpdateWithoutTeamInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithoutKeysInput {
  create: ProjectUncheckedCreateWithoutKeysInput!
  update: ProjectUncheckedUpdateWithoutKeysInput!
}

input ProjectUpsertWithoutMembershipsInput {
  create: ProjectUncheckedCreateWithoutMembershipsInput!
  update: ProjectUncheckedUpdateWithoutMembershipsInput!
}

input ProjectUpsertWithoutReportsInput {
  create: ProjectUncheckedCreateWithoutReportsInput!
  update: ProjectUncheckedUpdateWithoutReportsInput!
}

input ProjectUpsertWithoutSubjectsInput {
  create: ProjectUncheckedCreateWithoutSubjectsInput!
  update: ProjectUncheckedUpdateWithoutSubjectsInput!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput]
  NOT: [ProjectWhereInput]
  OR: [ProjectWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  keys: KeyListRelationFilter
  memberships: ProjectMembershipListRelationFilter
  name: StringFilter
  reports: ReportListRelationFilter
  subjects: SubjectListRelationFilter
  team: TeamWhereInput
  teamId: StringFilter
  updatedAt: DateTimeFilter
}

input ProjectWhereUniqueInput {
  id: String
  teamId_name: ProjectTeamIdNameCompoundUniqueInput
}

type Query {
  me: User
}

enum QueryMode {
  default
  insensitive
}

type ReportCountAggregateOutputType {
  _all: Int!
  createdAt: Int
  id: Int
  projectId: Int
  reviewerId: Int
  subjectId: Int
  targetId: Int
  updatedAt: Int
}

input ReportCreateInput {
  createdAt: DateTime
  id: String
  metadata: MetadataCreateNestedManyWithoutReportInput
  project: ProjectCreateNestedOneWithoutReportsInput!
  reviewer: ProjectMembershipCreateNestedOneWithoutReviewedReportsInput!
  subject: SubjectCreateNestedOneWithoutReportsInput!
  targetId: String!
  updatedAt: DateTime
}

input ReportCreateNestedManyWithoutProjectInput {
  connect: [ReportWhereUniqueInput]
  connectOrCreate: [ReportCreateOrConnectWithoutProjectInput]
  create: [ReportCreateWithoutProjectInput]
}

input ReportCreateNestedManyWithoutReviewerInput {
  connect: [ReportWhereUniqueInput]
  connectOrCreate: [ReportCreateOrConnectWithoutReviewerInput]
  create: [ReportCreateWithoutReviewerInput]
}

input ReportCreateNestedManyWithoutSubjectInput {
  connect: [ReportWhereUniqueInput]
  connectOrCreate: [ReportCreateOrConnectWithoutSubjectInput]
  create: [ReportCreateWithoutSubjectInput]
}

input ReportCreateNestedOneWithoutMetadataInput {
  connect: ReportWhereUniqueInput
  connectOrCreate: ReportCreateOrConnectWithoutMetadataInput
  create: ReportUncheckedCreateWithoutMetadataInput
}

input ReportCreateOrConnectWithoutMetadataInput {
  create: ReportUncheckedCreateWithoutMetadataInput!
  where: ReportWhereUniqueInput!
}

input ReportCreateOrConnectWithoutProjectInput {
  create: ReportUncheckedCreateWithoutProjectInput!
  where: ReportWhereUniqueInput!
}

input ReportCreateOrConnectWithoutReviewerInput {
  create: ReportUncheckedCreateWithoutReviewerInput!
  where: ReportWhereUniqueInput!
}

input ReportCreateOrConnectWithoutSubjectInput {
  create: ReportUncheckedCreateWithoutSubjectInput!
  where: ReportWhereUniqueInput!
}

input ReportCreateWithoutMetadataInput {
  createdAt: DateTime
  id: String
  project: ProjectCreateNestedOneWithoutReportsInput!
  reviewer: ProjectMembershipCreateNestedOneWithoutReviewedReportsInput!
  subject: SubjectCreateNestedOneWithoutReportsInput!
  targetId: String!
  updatedAt: DateTime
}

input ReportCreateWithoutProjectInput {
  createdAt: DateTime
  id: String
  metadata: MetadataCreateNestedManyWithoutReportInput
  reviewer: ProjectMembershipCreateNestedOneWithoutReviewedReportsInput!
  subject: SubjectCreateNestedOneWithoutReportsInput!
  targetId: String!
  updatedAt: DateTime
}

input ReportCreateWithoutReviewerInput {
  createdAt: DateTime
  id: String
  metadata: MetadataCreateNestedManyWithoutReportInput
  project: ProjectCreateNestedOneWithoutReportsInput!
  subject: SubjectCreateNestedOneWithoutReportsInput!
  targetId: String!
  updatedAt: DateTime
}

input ReportCreateWithoutSubjectInput {
  createdAt: DateTime
  id: String
  metadata: MetadataCreateNestedManyWithoutReportInput
  project: ProjectCreateNestedOneWithoutReportsInput!
  reviewer: ProjectMembershipCreateNestedOneWithoutReviewedReportsInput!
  targetId: String!
  updatedAt: DateTime
}

input ReportListRelationFilter {
  every: ReportWhereInput
  none: ReportWhereInput
  some: ReportWhereInput
}

type ReportMaxAggregateOutputType {
  createdAt: DateTime
  id: String
  projectId: String
  reviewerId: String
  subjectId: String
  targetId: String
  updatedAt: DateTime
}

type ReportMinAggregateOutputType {
  createdAt: DateTime
  id: String
  projectId: String
  reviewerId: String
  subjectId: String
  targetId: String
  updatedAt: DateTime
}

input ReportOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  project: ProjectOrderByInput
  projectId: SortOrder
  reviewer: ProjectMembershipOrderByInput
  reviewerId: SortOrder
  subject: SubjectOrderByInput
  subjectId: SortOrder
  targetId: SortOrder
  updatedAt: SortOrder
}

input ReportRelationFilter {
  is: ReportWhereInput
  isNot: ReportWhereInput
}

enum ReportScalarFieldEnum {
  createdAt
  id
  projectId
  reviewerId
  subjectId
  targetId
  updatedAt
}

input ReportScalarWhereInput {
  AND: [ReportScalarWhereInput]
  NOT: [ReportScalarWhereInput]
  OR: [ReportScalarWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  projectId: StringFilter
  reviewerId: StringFilter
  subjectId: StringFilter
  targetId: StringFilter
  updatedAt: DateTimeFilter
}

input ReportUncheckedCreateInput {
  createdAt: DateTime
  id: String
  metadata: MetadataUncheckedCreateNestedManyWithoutReportInput
  projectId: String!
  reviewerId: String!
  subjectId: String!
  targetId: String!
  updatedAt: DateTime
}

input ReportUncheckedCreateNestedManyWithoutProjectInput {
  connect: [ReportWhereUniqueInput]
  connectOrCreate: [ReportCreateOrConnectWithoutProjectInput]
  create: [ReportCreateWithoutProjectInput]
}

input ReportUncheckedCreateNestedManyWithoutReviewerInput {
  connect: [ReportWhereUniqueInput]
  connectOrCreate: [ReportCreateOrConnectWithoutReviewerInput]
  create: [ReportCreateWithoutReviewerInput]
}

input ReportUncheckedCreateNestedManyWithoutSubjectInput {
  connect: [ReportWhereUniqueInput]
  connectOrCreate: [ReportCreateOrConnectWithoutSubjectInput]
  create: [ReportCreateWithoutSubjectInput]
}

input ReportUncheckedCreateWithoutMetadataInput {
  createdAt: DateTime
  id: String
  projectId: String!
  reviewerId: String!
  subjectId: String!
  targetId: String!
  updatedAt: DateTime
}

input ReportUncheckedCreateWithoutProjectInput {
  createdAt: DateTime
  id: String
  metadata: MetadataUncheckedCreateNestedManyWithoutReportInput
  reviewerId: String!
  subjectId: String!
  targetId: String!
  updatedAt: DateTime
}

input ReportUncheckedCreateWithoutReviewerInput {
  createdAt: DateTime
  id: String
  metadata: MetadataUncheckedCreateNestedManyWithoutReportInput
  projectId: String!
  subjectId: String!
  targetId: String!
  updatedAt: DateTime
}

input ReportUncheckedCreateWithoutSubjectInput {
  createdAt: DateTime
  id: String
  metadata: MetadataUncheckedCreateNestedManyWithoutReportInput
  projectId: String!
  reviewerId: String!
  targetId: String!
  updatedAt: DateTime
}

input ReportUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: MetadataUncheckedUpdateManyWithoutReportInput
  projectId: StringFieldUpdateOperationsInput
  reviewerId: StringFieldUpdateOperationsInput
  subjectId: StringFieldUpdateOperationsInput
  targetId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  projectId: StringFieldUpdateOperationsInput
  reviewerId: StringFieldUpdateOperationsInput
  subjectId: StringFieldUpdateOperationsInput
  targetId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUncheckedUpdateManyWithoutProjectInput {
  connect: [ReportWhereUniqueInput]
  connectOrCreate: [ReportCreateOrConnectWithoutProjectInput]
  create: [ReportCreateWithoutProjectInput]
  delete: [ReportWhereUniqueInput]
  deleteMany: [ReportScalarWhereInput]
  disconnect: [ReportWhereUniqueInput]
  set: [ReportWhereUniqueInput]
  update: [ReportUpdateWithWhereUniqueWithoutProjectInput]
  updateMany: [ReportUpdateManyWithWhereWithoutProjectInput]
  upsert: [ReportUpsertWithWhereUniqueWithoutProjectInput]
}

input ReportUncheckedUpdateManyWithoutReportsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  reviewerId: StringFieldUpdateOperationsInput
  subjectId: StringFieldUpdateOperationsInput
  targetId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUncheckedUpdateManyWithoutReviewedReportsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  projectId: StringFieldUpdateOperationsInput
  subjectId: StringFieldUpdateOperationsInput
  targetId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUncheckedUpdateManyWithoutReviewerInput {
  connect: [ReportWhereUniqueInput]
  connectOrCreate: [ReportCreateOrConnectWithoutReviewerInput]
  create: [ReportCreateWithoutReviewerInput]
  delete: [ReportWhereUniqueInput]
  deleteMany: [ReportScalarWhereInput]
  disconnect: [ReportWhereUniqueInput]
  set: [ReportWhereUniqueInput]
  update: [ReportUpdateWithWhereUniqueWithoutReviewerInput]
  updateMany: [ReportUpdateManyWithWhereWithoutReviewerInput]
  upsert: [ReportUpsertWithWhereUniqueWithoutReviewerInput]
}

input ReportUncheckedUpdateManyWithoutSubjectInput {
  connect: [ReportWhereUniqueInput]
  connectOrCreate: [ReportCreateOrConnectWithoutSubjectInput]
  create: [ReportCreateWithoutSubjectInput]
  delete: [ReportWhereUniqueInput]
  deleteMany: [ReportScalarWhereInput]
  disconnect: [ReportWhereUniqueInput]
  set: [ReportWhereUniqueInput]
  update: [ReportUpdateWithWhereUniqueWithoutSubjectInput]
  updateMany: [ReportUpdateManyWithWhereWithoutSubjectInput]
  upsert: [ReportUpsertWithWhereUniqueWithoutSubjectInput]
}

input ReportUncheckedUpdateWithoutMetadataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  projectId: StringFieldUpdateOperationsInput
  reviewerId: StringFieldUpdateOperationsInput
  subjectId: StringFieldUpdateOperationsInput
  targetId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUncheckedUpdateWithoutProjectInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: MetadataUncheckedUpdateManyWithoutReportInput
  reviewerId: StringFieldUpdateOperationsInput
  subjectId: StringFieldUpdateOperationsInput
  targetId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUncheckedUpdateWithoutReviewerInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: MetadataUncheckedUpdateManyWithoutReportInput
  projectId: StringFieldUpdateOperationsInput
  subjectId: StringFieldUpdateOperationsInput
  targetId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUncheckedUpdateWithoutSubjectInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: MetadataUncheckedUpdateManyWithoutReportInput
  projectId: StringFieldUpdateOperationsInput
  reviewerId: StringFieldUpdateOperationsInput
  targetId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: MetadataUpdateManyWithoutReportInput
  project: ProjectUpdateOneRequiredWithoutReportsInput
  reviewer: ProjectMembershipUpdateOneRequiredWithoutReviewedReportsInput
  subject: SubjectUpdateOneRequiredWithoutReportsInput
  targetId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  targetId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUpdateManyWithWhereWithoutProjectInput {
  data: ReportUncheckedUpdateManyWithoutReportsInput!
  where: ReportScalarWhereInput!
}

input ReportUpdateManyWithWhereWithoutReviewerInput {
  data: ReportUncheckedUpdateManyWithoutReviewedReportsInput!
  where: ReportScalarWhereInput!
}

input ReportUpdateManyWithWhereWithoutSubjectInput {
  data: ReportUncheckedUpdateManyWithoutReportsInput!
  where: ReportScalarWhereInput!
}

input ReportUpdateManyWithoutProjectInput {
  connect: [ReportWhereUniqueInput]
  connectOrCreate: [ReportCreateOrConnectWithoutProjectInput]
  create: [ReportCreateWithoutProjectInput]
  delete: [ReportWhereUniqueInput]
  deleteMany: [ReportScalarWhereInput]
  disconnect: [ReportWhereUniqueInput]
  set: [ReportWhereUniqueInput]
  update: [ReportUpdateWithWhereUniqueWithoutProjectInput]
  updateMany: [ReportUpdateManyWithWhereWithoutProjectInput]
  upsert: [ReportUpsertWithWhereUniqueWithoutProjectInput]
}

input ReportUpdateManyWithoutReviewerInput {
  connect: [ReportWhereUniqueInput]
  connectOrCreate: [ReportCreateOrConnectWithoutReviewerInput]
  create: [ReportCreateWithoutReviewerInput]
  delete: [ReportWhereUniqueInput]
  deleteMany: [ReportScalarWhereInput]
  disconnect: [ReportWhereUniqueInput]
  set: [ReportWhereUniqueInput]
  update: [ReportUpdateWithWhereUniqueWithoutReviewerInput]
  updateMany: [ReportUpdateManyWithWhereWithoutReviewerInput]
  upsert: [ReportUpsertWithWhereUniqueWithoutReviewerInput]
}

input ReportUpdateManyWithoutSubjectInput {
  connect: [ReportWhereUniqueInput]
  connectOrCreate: [ReportCreateOrConnectWithoutSubjectInput]
  create: [ReportCreateWithoutSubjectInput]
  delete: [ReportWhereUniqueInput]
  deleteMany: [ReportScalarWhereInput]
  disconnect: [ReportWhereUniqueInput]
  set: [ReportWhereUniqueInput]
  update: [ReportUpdateWithWhereUniqueWithoutSubjectInput]
  updateMany: [ReportUpdateManyWithWhereWithoutSubjectInput]
  upsert: [ReportUpsertWithWhereUniqueWithoutSubjectInput]
}

input ReportUpdateOneRequiredWithoutMetadataInput {
  connect: ReportWhereUniqueInput
  connectOrCreate: ReportCreateOrConnectWithoutMetadataInput
  create: ReportUncheckedCreateWithoutMetadataInput
  update: ReportUncheckedUpdateWithoutMetadataInput
  upsert: ReportUpsertWithoutMetadataInput
}

input ReportUpdateWithWhereUniqueWithoutProjectInput {
  data: ReportUncheckedUpdateWithoutProjectInput!
  where: ReportWhereUniqueInput!
}

input ReportUpdateWithWhereUniqueWithoutReviewerInput {
  data: ReportUncheckedUpdateWithoutReviewerInput!
  where: ReportWhereUniqueInput!
}

input ReportUpdateWithWhereUniqueWithoutSubjectInput {
  data: ReportUncheckedUpdateWithoutSubjectInput!
  where: ReportWhereUniqueInput!
}

input ReportUpdateWithoutMetadataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutReportsInput
  reviewer: ProjectMembershipUpdateOneRequiredWithoutReviewedReportsInput
  subject: SubjectUpdateOneRequiredWithoutReportsInput
  targetId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUpdateWithoutProjectInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: MetadataUpdateManyWithoutReportInput
  reviewer: ProjectMembershipUpdateOneRequiredWithoutReviewedReportsInput
  subject: SubjectUpdateOneRequiredWithoutReportsInput
  targetId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUpdateWithoutReviewerInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: MetadataUpdateManyWithoutReportInput
  project: ProjectUpdateOneRequiredWithoutReportsInput
  subject: SubjectUpdateOneRequiredWithoutReportsInput
  targetId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUpdateWithoutSubjectInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: MetadataUpdateManyWithoutReportInput
  project: ProjectUpdateOneRequiredWithoutReportsInput
  reviewer: ProjectMembershipUpdateOneRequiredWithoutReviewedReportsInput
  targetId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUpsertWithWhereUniqueWithoutProjectInput {
  create: ReportUncheckedCreateWithoutProjectInput!
  update: ReportUncheckedUpdateWithoutProjectInput!
  where: ReportWhereUniqueInput!
}

input ReportUpsertWithWhereUniqueWithoutReviewerInput {
  create: ReportUncheckedCreateWithoutReviewerInput!
  update: ReportUncheckedUpdateWithoutReviewerInput!
  where: ReportWhereUniqueInput!
}

input ReportUpsertWithWhereUniqueWithoutSubjectInput {
  create: ReportUncheckedCreateWithoutSubjectInput!
  update: ReportUncheckedUpdateWithoutSubjectInput!
  where: ReportWhereUniqueInput!
}

input ReportUpsertWithoutMetadataInput {
  create: ReportUncheckedCreateWithoutMetadataInput!
  update: ReportUncheckedUpdateWithoutMetadataInput!
}

input ReportWhereInput {
  AND: [ReportWhereInput]
  NOT: [ReportWhereInput]
  OR: [ReportWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  metadata: MetadataListRelationFilter
  project: ProjectWhereInput
  projectId: StringFilter
  reviewer: ProjectMembershipWhereInput
  reviewerId: StringFilter
  subject: SubjectWhereInput
  subjectId: StringFilter
  targetId: StringFilter
  updatedAt: DateTimeFilter
}

input ReportWhereUniqueInput {
  id: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

type SubjectCountAggregateOutputType {
  _all: Int!
  archivedAt: Int
  createdAt: Int
  description: Int
  id: Int
  key: Int
  projectId: Int
  updatedAt: Int
}

input SubjectCreateInput {
  archivedAt: DateTime
  createdAt: DateTime
  description: String
  id: String
  key: String!
  project: ProjectCreateNestedOneWithoutSubjectsInput!
  reports: ReportCreateNestedManyWithoutSubjectInput
  updatedAt: DateTime
}

input SubjectCreateNestedManyWithoutProjectInput {
  connect: [SubjectWhereUniqueInput]
  connectOrCreate: [SubjectCreateOrConnectWithoutProjectInput]
  create: [SubjectCreateWithoutProjectInput]
}

input SubjectCreateNestedOneWithoutReportsInput {
  connect: SubjectWhereUniqueInput
  connectOrCreate: SubjectCreateOrConnectWithoutReportsInput
  create: SubjectUncheckedCreateWithoutReportsInput
}

input SubjectCreateOrConnectWithoutProjectInput {
  create: SubjectUncheckedCreateWithoutProjectInput!
  where: SubjectWhereUniqueInput!
}

input SubjectCreateOrConnectWithoutReportsInput {
  create: SubjectUncheckedCreateWithoutReportsInput!
  where: SubjectWhereUniqueInput!
}

input SubjectCreateWithoutProjectInput {
  archivedAt: DateTime
  createdAt: DateTime
  description: String
  id: String
  key: String!
  reports: ReportCreateNestedManyWithoutSubjectInput
  updatedAt: DateTime
}

input SubjectCreateWithoutReportsInput {
  archivedAt: DateTime
  createdAt: DateTime
  description: String
  id: String
  key: String!
  project: ProjectCreateNestedOneWithoutSubjectsInput!
  updatedAt: DateTime
}

input SubjectListRelationFilter {
  every: SubjectWhereInput
  none: SubjectWhereInput
  some: SubjectWhereInput
}

type SubjectMaxAggregateOutputType {
  archivedAt: DateTime
  createdAt: DateTime
  description: String
  id: String
  key: String
  projectId: String
  updatedAt: DateTime
}

type SubjectMinAggregateOutputType {
  archivedAt: DateTime
  createdAt: DateTime
  description: String
  id: String
  key: String
  projectId: String
  updatedAt: DateTime
}

input SubjectOrderByInput {
  archivedAt: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  key: SortOrder
  project: ProjectOrderByInput
  projectId: SortOrder
  updatedAt: SortOrder
}

input SubjectProjectIdKeyCompoundUniqueInput {
  key: String!
  projectId: String!
}

input SubjectRelationFilter {
  is: SubjectWhereInput
  isNot: SubjectWhereInput
}

enum SubjectScalarFieldEnum {
  archivedAt
  createdAt
  description
  id
  key
  projectId
  updatedAt
}

input SubjectScalarWhereInput {
  AND: [SubjectScalarWhereInput]
  NOT: [SubjectScalarWhereInput]
  OR: [SubjectScalarWhereInput]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  key: StringFilter
  projectId: StringFilter
  updatedAt: DateTimeFilter
}

input SubjectUncheckedCreateInput {
  archivedAt: DateTime
  createdAt: DateTime
  description: String
  id: String
  key: String!
  projectId: String!
  reports: ReportUncheckedCreateNestedManyWithoutSubjectInput
  updatedAt: DateTime
}

input SubjectUncheckedCreateNestedManyWithoutProjectInput {
  connect: [SubjectWhereUniqueInput]
  connectOrCreate: [SubjectCreateOrConnectWithoutProjectInput]
  create: [SubjectCreateWithoutProjectInput]
}

input SubjectUncheckedCreateWithoutProjectInput {
  archivedAt: DateTime
  createdAt: DateTime
  description: String
  id: String
  key: String!
  reports: ReportUncheckedCreateNestedManyWithoutSubjectInput
  updatedAt: DateTime
}

input SubjectUncheckedCreateWithoutReportsInput {
  archivedAt: DateTime
  createdAt: DateTime
  description: String
  id: String
  key: String!
  projectId: String!
  updatedAt: DateTime
}

input SubjectUncheckedUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  projectId: StringFieldUpdateOperationsInput
  reports: ReportUncheckedUpdateManyWithoutSubjectInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUncheckedUpdateManyInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  projectId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUncheckedUpdateManyWithoutProjectInput {
  connect: [SubjectWhereUniqueInput]
  connectOrCreate: [SubjectCreateOrConnectWithoutProjectInput]
  create: [SubjectCreateWithoutProjectInput]
  delete: [SubjectWhereUniqueInput]
  deleteMany: [SubjectScalarWhereInput]
  disconnect: [SubjectWhereUniqueInput]
  set: [SubjectWhereUniqueInput]
  update: [SubjectUpdateWithWhereUniqueWithoutProjectInput]
  updateMany: [SubjectUpdateManyWithWhereWithoutProjectInput]
  upsert: [SubjectUpsertWithWhereUniqueWithoutProjectInput]
}

input SubjectUncheckedUpdateManyWithoutSubjectsInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUncheckedUpdateWithoutProjectInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  reports: ReportUncheckedUpdateManyWithoutSubjectInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUncheckedUpdateWithoutReportsInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  projectId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUpdateInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutSubjectsInput
  reports: ReportUpdateManyWithoutSubjectInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUpdateManyMutationInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUpdateManyWithWhereWithoutProjectInput {
  data: SubjectUncheckedUpdateManyWithoutSubjectsInput!
  where: SubjectScalarWhereInput!
}

input SubjectUpdateManyWithoutProjectInput {
  connect: [SubjectWhereUniqueInput]
  connectOrCreate: [SubjectCreateOrConnectWithoutProjectInput]
  create: [SubjectCreateWithoutProjectInput]
  delete: [SubjectWhereUniqueInput]
  deleteMany: [SubjectScalarWhereInput]
  disconnect: [SubjectWhereUniqueInput]
  set: [SubjectWhereUniqueInput]
  update: [SubjectUpdateWithWhereUniqueWithoutProjectInput]
  updateMany: [SubjectUpdateManyWithWhereWithoutProjectInput]
  upsert: [SubjectUpsertWithWhereUniqueWithoutProjectInput]
}

input SubjectUpdateOneRequiredWithoutReportsInput {
  connect: SubjectWhereUniqueInput
  connectOrCreate: SubjectCreateOrConnectWithoutReportsInput
  create: SubjectUncheckedCreateWithoutReportsInput
  update: SubjectUncheckedUpdateWithoutReportsInput
  upsert: SubjectUpsertWithoutReportsInput
}

input SubjectUpdateWithWhereUniqueWithoutProjectInput {
  data: SubjectUncheckedUpdateWithoutProjectInput!
  where: SubjectWhereUniqueInput!
}

input SubjectUpdateWithoutProjectInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  reports: ReportUpdateManyWithoutSubjectInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUpdateWithoutReportsInput {
  archivedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutSubjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubjectUpsertWithWhereUniqueWithoutProjectInput {
  create: SubjectUncheckedCreateWithoutProjectInput!
  update: SubjectUncheckedUpdateWithoutProjectInput!
  where: SubjectWhereUniqueInput!
}

input SubjectUpsertWithoutReportsInput {
  create: SubjectUncheckedCreateWithoutReportsInput!
  update: SubjectUncheckedUpdateWithoutReportsInput!
}

input SubjectWhereInput {
  AND: [SubjectWhereInput]
  NOT: [SubjectWhereInput]
  OR: [SubjectWhereInput]
  archivedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  key: StringFilter
  project: ProjectWhereInput
  projectId: StringFilter
  reports: ReportListRelationFilter
  updatedAt: DateTimeFilter
}

input SubjectWhereUniqueInput {
  id: String
  projectId_key: SubjectProjectIdKeyCompoundUniqueInput
}

type TeamCountAggregateOutputType {
  _all: Int!
  contactEmail: Int
  createdAt: Int
  id: Int
  name: Int
  personal: Int
  stripeId: Int
  updatedAt: Int
}

input TeamCreateInput {
  contactEmail: String!
  createdAt: DateTime
  id: String
  memberships: TeamMembershipCreateNestedManyWithoutTeamInput
  name: String!
  personal: Boolean
  projects: ProjectCreateNestedManyWithoutTeamInput
  stripeId: String
  updatedAt: DateTime
}

input TeamCreateNestedOneWithoutMembershipsInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutMembershipsInput
  create: TeamUncheckedCreateWithoutMembershipsInput
}

input TeamCreateNestedOneWithoutProjectsInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutProjectsInput
  create: TeamUncheckedCreateWithoutProjectsInput
}

input TeamCreateOrConnectWithoutMembershipsInput {
  create: TeamUncheckedCreateWithoutMembershipsInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateOrConnectWithoutProjectsInput {
  create: TeamUncheckedCreateWithoutProjectsInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateWithoutMembershipsInput {
  contactEmail: String!
  createdAt: DateTime
  id: String
  name: String!
  personal: Boolean
  projects: ProjectCreateNestedManyWithoutTeamInput
  stripeId: String
  updatedAt: DateTime
}

input TeamCreateWithoutProjectsInput {
  contactEmail: String!
  createdAt: DateTime
  id: String
  memberships: TeamMembershipCreateNestedManyWithoutTeamInput
  name: String!
  personal: Boolean
  stripeId: String
  updatedAt: DateTime
}

type TeamMaxAggregateOutputType {
  contactEmail: String
  createdAt: DateTime
  id: String
  name: String
  personal: Boolean
  stripeId: String
  updatedAt: DateTime
}

type TeamMembershipCountAggregateOutputType {
  _all: Int!
  createdAt: Int
  id: Int
  role: Int
  teamId: Int
  updatedAt: Int
  userId: Int
}

input TeamMembershipCreateInput {
  createdAt: DateTime
  id: String
  role: TeamRoles
  team: TeamCreateNestedOneWithoutMembershipsInput!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutTeamMembershipsInput!
}

input TeamMembershipCreateNestedManyWithoutTeamInput {
  connect: [TeamMembershipWhereUniqueInput]
  connectOrCreate: [TeamMembershipCreateOrConnectWithoutTeamInput]
  create: [TeamMembershipCreateWithoutTeamInput]
}

input TeamMembershipCreateNestedManyWithoutUserInput {
  connect: [TeamMembershipWhereUniqueInput]
  connectOrCreate: [TeamMembershipCreateOrConnectWithoutUserInput]
  create: [TeamMembershipCreateWithoutUserInput]
}

input TeamMembershipCreateOrConnectWithoutTeamInput {
  create: TeamMembershipUncheckedCreateWithoutTeamInput!
  where: TeamMembershipWhereUniqueInput!
}

input TeamMembershipCreateOrConnectWithoutUserInput {
  create: TeamMembershipUncheckedCreateWithoutUserInput!
  where: TeamMembershipWhereUniqueInput!
}

input TeamMembershipCreateWithoutTeamInput {
  createdAt: DateTime
  id: String
  role: TeamRoles
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutTeamMembershipsInput!
}

input TeamMembershipCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  role: TeamRoles
  team: TeamCreateNestedOneWithoutMembershipsInput!
  updatedAt: DateTime
}

input TeamMembershipListRelationFilter {
  every: TeamMembershipWhereInput
  none: TeamMembershipWhereInput
  some: TeamMembershipWhereInput
}

type TeamMembershipMaxAggregateOutputType {
  createdAt: DateTime
  id: String
  role: TeamRoles
  teamId: String
  updatedAt: DateTime
  userId: String
}

type TeamMembershipMinAggregateOutputType {
  createdAt: DateTime
  id: String
  role: TeamRoles
  teamId: String
  updatedAt: DateTime
  userId: String
}

input TeamMembershipOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  role: SortOrder
  team: TeamOrderByInput
  teamId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByInput
  userId: SortOrder
}

enum TeamMembershipScalarFieldEnum {
  createdAt
  id
  role
  teamId
  updatedAt
  userId
}

input TeamMembershipScalarWhereInput {
  AND: [TeamMembershipScalarWhereInput]
  NOT: [TeamMembershipScalarWhereInput]
  OR: [TeamMembershipScalarWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  role: EnumTeamRolesFilter
  teamId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input TeamMembershipUncheckedCreateInput {
  createdAt: DateTime
  id: String
  role: TeamRoles
  teamId: String!
  updatedAt: DateTime
  userId: String!
}

input TeamMembershipUncheckedCreateNestedManyWithoutTeamInput {
  connect: [TeamMembershipWhereUniqueInput]
  connectOrCreate: [TeamMembershipCreateOrConnectWithoutTeamInput]
  create: [TeamMembershipCreateWithoutTeamInput]
}

input TeamMembershipUncheckedCreateNestedManyWithoutUserInput {
  connect: [TeamMembershipWhereUniqueInput]
  connectOrCreate: [TeamMembershipCreateOrConnectWithoutUserInput]
  create: [TeamMembershipCreateWithoutUserInput]
}

input TeamMembershipUncheckedCreateWithoutTeamInput {
  createdAt: DateTime
  id: String
  role: TeamRoles
  updatedAt: DateTime
  userId: String!
}

input TeamMembershipUncheckedCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  role: TeamRoles
  teamId: String!
  updatedAt: DateTime
}

input TeamMembershipUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  teamId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input TeamMembershipUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  teamId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input TeamMembershipUncheckedUpdateManyWithoutMembershipsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input TeamMembershipUncheckedUpdateManyWithoutTeamInput {
  connect: [TeamMembershipWhereUniqueInput]
  connectOrCreate: [TeamMembershipCreateOrConnectWithoutTeamInput]
  create: [TeamMembershipCreateWithoutTeamInput]
  delete: [TeamMembershipWhereUniqueInput]
  deleteMany: [TeamMembershipScalarWhereInput]
  disconnect: [TeamMembershipWhereUniqueInput]
  set: [TeamMembershipWhereUniqueInput]
  update: [TeamMembershipUpdateWithWhereUniqueWithoutTeamInput]
  updateMany: [TeamMembershipUpdateManyWithWhereWithoutTeamInput]
  upsert: [TeamMembershipUpsertWithWhereUniqueWithoutTeamInput]
}

input TeamMembershipUncheckedUpdateManyWithoutTeamMembershipsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  teamId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamMembershipUncheckedUpdateManyWithoutUserInput {
  connect: [TeamMembershipWhereUniqueInput]
  connectOrCreate: [TeamMembershipCreateOrConnectWithoutUserInput]
  create: [TeamMembershipCreateWithoutUserInput]
  delete: [TeamMembershipWhereUniqueInput]
  deleteMany: [TeamMembershipScalarWhereInput]
  disconnect: [TeamMembershipWhereUniqueInput]
  set: [TeamMembershipWhereUniqueInput]
  update: [TeamMembershipUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [TeamMembershipUpdateManyWithWhereWithoutUserInput]
  upsert: [TeamMembershipUpsertWithWhereUniqueWithoutUserInput]
}

input TeamMembershipUncheckedUpdateWithoutTeamInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input TeamMembershipUncheckedUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  teamId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamMembershipUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  team: TeamUpdateOneRequiredWithoutMembershipsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTeamMembershipsInput
}

input TeamMembershipUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamMembershipUpdateManyWithWhereWithoutTeamInput {
  data: TeamMembershipUncheckedUpdateManyWithoutMembershipsInput!
  where: TeamMembershipScalarWhereInput!
}

input TeamMembershipUpdateManyWithWhereWithoutUserInput {
  data: TeamMembershipUncheckedUpdateManyWithoutTeamMembershipsInput!
  where: TeamMembershipScalarWhereInput!
}

input TeamMembershipUpdateManyWithoutTeamInput {
  connect: [TeamMembershipWhereUniqueInput]
  connectOrCreate: [TeamMembershipCreateOrConnectWithoutTeamInput]
  create: [TeamMembershipCreateWithoutTeamInput]
  delete: [TeamMembershipWhereUniqueInput]
  deleteMany: [TeamMembershipScalarWhereInput]
  disconnect: [TeamMembershipWhereUniqueInput]
  set: [TeamMembershipWhereUniqueInput]
  update: [TeamMembershipUpdateWithWhereUniqueWithoutTeamInput]
  updateMany: [TeamMembershipUpdateManyWithWhereWithoutTeamInput]
  upsert: [TeamMembershipUpsertWithWhereUniqueWithoutTeamInput]
}

input TeamMembershipUpdateManyWithoutUserInput {
  connect: [TeamMembershipWhereUniqueInput]
  connectOrCreate: [TeamMembershipCreateOrConnectWithoutUserInput]
  create: [TeamMembershipCreateWithoutUserInput]
  delete: [TeamMembershipWhereUniqueInput]
  deleteMany: [TeamMembershipScalarWhereInput]
  disconnect: [TeamMembershipWhereUniqueInput]
  set: [TeamMembershipWhereUniqueInput]
  update: [TeamMembershipUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [TeamMembershipUpdateManyWithWhereWithoutUserInput]
  upsert: [TeamMembershipUpsertWithWhereUniqueWithoutUserInput]
}

input TeamMembershipUpdateWithWhereUniqueWithoutTeamInput {
  data: TeamMembershipUncheckedUpdateWithoutTeamInput!
  where: TeamMembershipWhereUniqueInput!
}

input TeamMembershipUpdateWithWhereUniqueWithoutUserInput {
  data: TeamMembershipUncheckedUpdateWithoutUserInput!
  where: TeamMembershipWhereUniqueInput!
}

input TeamMembershipUpdateWithoutTeamInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTeamMembershipsInput
}

input TeamMembershipUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  team: TeamUpdateOneRequiredWithoutMembershipsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamMembershipUpsertWithWhereUniqueWithoutTeamInput {
  create: TeamMembershipUncheckedCreateWithoutTeamInput!
  update: TeamMembershipUncheckedUpdateWithoutTeamInput!
  where: TeamMembershipWhereUniqueInput!
}

input TeamMembershipUpsertWithWhereUniqueWithoutUserInput {
  create: TeamMembershipUncheckedCreateWithoutUserInput!
  update: TeamMembershipUncheckedUpdateWithoutUserInput!
  where: TeamMembershipWhereUniqueInput!
}

input TeamMembershipUserIdTeamIdCompoundUniqueInput {
  teamId: String!
  userId: String!
}

input TeamMembershipWhereInput {
  AND: [TeamMembershipWhereInput]
  NOT: [TeamMembershipWhereInput]
  OR: [TeamMembershipWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  role: EnumTeamRolesFilter
  team: TeamWhereInput
  teamId: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input TeamMembershipWhereUniqueInput {
  id: String
  userId_teamId: TeamMembershipUserIdTeamIdCompoundUniqueInput
}

type TeamMinAggregateOutputType {
  contactEmail: String
  createdAt: DateTime
  id: String
  name: String
  personal: Boolean
  stripeId: String
  updatedAt: DateTime
}

input TeamOrderByInput {
  contactEmail: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  personal: SortOrder
  stripeId: SortOrder
  updatedAt: SortOrder
}

input TeamRelationFilter {
  is: TeamWhereInput
  isNot: TeamWhereInput
}

enum TeamRoles {
  ADMIN
  BILLING
  MEMBER
}

enum TeamScalarFieldEnum {
  contactEmail
  createdAt
  id
  name
  personal
  stripeId
  updatedAt
}

input TeamUncheckedCreateInput {
  contactEmail: String!
  createdAt: DateTime
  id: String
  memberships: TeamMembershipUncheckedCreateNestedManyWithoutTeamInput
  name: String!
  personal: Boolean
  projects: ProjectUncheckedCreateNestedManyWithoutTeamInput
  stripeId: String
  updatedAt: DateTime
}

input TeamUncheckedCreateWithoutMembershipsInput {
  contactEmail: String!
  createdAt: DateTime
  id: String
  name: String!
  personal: Boolean
  projects: ProjectUncheckedCreateNestedManyWithoutTeamInput
  stripeId: String
  updatedAt: DateTime
}

input TeamUncheckedCreateWithoutProjectsInput {
  contactEmail: String!
  createdAt: DateTime
  id: String
  memberships: TeamMembershipUncheckedCreateNestedManyWithoutTeamInput
  name: String!
  personal: Boolean
  stripeId: String
  updatedAt: DateTime
}

input TeamUncheckedUpdateInput {
  contactEmail: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  memberships: TeamMembershipUncheckedUpdateManyWithoutTeamInput
  name: StringFieldUpdateOperationsInput
  personal: BoolFieldUpdateOperationsInput
  projects: ProjectUncheckedUpdateManyWithoutTeamInput
  stripeId: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamUncheckedUpdateManyInput {
  contactEmail: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  personal: BoolFieldUpdateOperationsInput
  stripeId: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamUncheckedUpdateWithoutMembershipsInput {
  contactEmail: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  personal: BoolFieldUpdateOperationsInput
  projects: ProjectUncheckedUpdateManyWithoutTeamInput
  stripeId: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamUncheckedUpdateWithoutProjectsInput {
  contactEmail: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  memberships: TeamMembershipUncheckedUpdateManyWithoutTeamInput
  name: StringFieldUpdateOperationsInput
  personal: BoolFieldUpdateOperationsInput
  stripeId: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamUpdateInput {
  contactEmail: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  memberships: TeamMembershipUpdateManyWithoutTeamInput
  name: StringFieldUpdateOperationsInput
  personal: BoolFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutTeamInput
  stripeId: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamUpdateManyMutationInput {
  contactEmail: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  personal: BoolFieldUpdateOperationsInput
  stripeId: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamUpdateOneRequiredWithoutMembershipsInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutMembershipsInput
  create: TeamUncheckedCreateWithoutMembershipsInput
  update: TeamUncheckedUpdateWithoutMembershipsInput
  upsert: TeamUpsertWithoutMembershipsInput
}

input TeamUpdateOneRequiredWithoutProjectsInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutProjectsInput
  create: TeamUncheckedCreateWithoutProjectsInput
  update: TeamUncheckedUpdateWithoutProjectsInput
  upsert: TeamUpsertWithoutProjectsInput
}

input TeamUpdateWithoutMembershipsInput {
  contactEmail: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  personal: BoolFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutTeamInput
  stripeId: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamUpdateWithoutProjectsInput {
  contactEmail: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  memberships: TeamMembershipUpdateManyWithoutTeamInput
  name: StringFieldUpdateOperationsInput
  personal: BoolFieldUpdateOperationsInput
  stripeId: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamUpsertWithoutMembershipsInput {
  create: TeamUncheckedCreateWithoutMembershipsInput!
  update: TeamUncheckedUpdateWithoutMembershipsInput!
}

input TeamUpsertWithoutProjectsInput {
  create: TeamUncheckedCreateWithoutProjectsInput!
  update: TeamUncheckedUpdateWithoutProjectsInput!
}

input TeamWhereInput {
  AND: [TeamWhereInput]
  NOT: [TeamWhereInput]
  OR: [TeamWhereInput]
  contactEmail: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  memberships: TeamMembershipListRelationFilter
  name: StringFilter
  personal: BoolFilter
  projects: ProjectListRelationFilter
  stripeId: StringNullableFilter
  updatedAt: DateTimeFilter
}

input TeamWhereUniqueInput {
  id: String
  name: String
}

type User {
  confirmed: Boolean!
  email: String!
  id: ID!
  profile: UserProfile
}

type UserCountAggregateOutputType {
  _all: Int!
  confirmed: Int
  createdAt: Int
  email: Int
  firstName: Int
  id: Int
  lastName: Int
  passwordHash: Int
  updatedAt: Int
}

input UserCreateInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  emailConfirmation: EmailConfirmationCreateNestedOneWithoutUserInput
  firstName: String!
  id: String
  lastName: String!
  passwordHash: String!
  projectMemberships: ProjectMembershipCreateNestedManyWithoutUserInput
  teamMemberships: TeamMembershipCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutEmailConfirmationInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutEmailConfirmationInput
  create: UserUncheckedCreateWithoutEmailConfirmationInput
}

input UserCreateNestedOneWithoutProjectMembershipsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProjectMembershipsInput
  create: UserUncheckedCreateWithoutProjectMembershipsInput
}

input UserCreateNestedOneWithoutTeamMembershipsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTeamMembershipsInput
  create: UserUncheckedCreateWithoutTeamMembershipsInput
}

input UserCreateOrConnectWithoutEmailConfirmationInput {
  create: UserUncheckedCreateWithoutEmailConfirmationInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutProjectMembershipsInput {
  create: UserUncheckedCreateWithoutProjectMembershipsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTeamMembershipsInput {
  create: UserUncheckedCreateWithoutTeamMembershipsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutEmailConfirmationInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  lastName: String!
  passwordHash: String!
  projectMemberships: ProjectMembershipCreateNestedManyWithoutUserInput
  teamMemberships: TeamMembershipCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserCreateWithoutProjectMembershipsInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  emailConfirmation: EmailConfirmationCreateNestedOneWithoutUserInput
  firstName: String!
  id: String
  lastName: String!
  passwordHash: String!
  teamMemberships: TeamMembershipCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserCreateWithoutTeamMembershipsInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  emailConfirmation: EmailConfirmationCreateNestedOneWithoutUserInput
  firstName: String!
  id: String
  lastName: String!
  passwordHash: String!
  projectMemberships: ProjectMembershipCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

type UserMaxAggregateOutputType {
  confirmed: Boolean
  createdAt: DateTime
  email: String
  firstName: String
  id: String
  lastName: String
  passwordHash: String
  updatedAt: DateTime
}

type UserMinAggregateOutputType {
  confirmed: Boolean
  createdAt: DateTime
  email: String
  firstName: String
  id: String
  lastName: String
  passwordHash: String
  updatedAt: DateTime
}

input UserOrderByInput {
  confirmed: SortOrder
  createdAt: SortOrder
  email: SortOrder
  emailConfirmation: EmailConfirmationOrderByInput
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  passwordHash: SortOrder
  updatedAt: SortOrder
}

type UserProfile {
  confirmed: Boolean!
  email: String!
  id: ID!
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  confirmed
  createdAt
  email
  firstName
  id
  lastName
  passwordHash
  updatedAt
}

input UserUncheckedCreateInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  emailConfirmation: EmailConfirmationUncheckedCreateNestedOneWithoutUserInput
  firstName: String!
  id: String
  lastName: String!
  passwordHash: String!
  projectMemberships: ProjectMembershipUncheckedCreateNestedManyWithoutUserInput
  teamMemberships: TeamMembershipUncheckedCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserUncheckedCreateWithoutEmailConfirmationInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  firstName: String!
  id: String
  lastName: String!
  passwordHash: String!
  projectMemberships: ProjectMembershipUncheckedCreateNestedManyWithoutUserInput
  teamMemberships: TeamMembershipUncheckedCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserUncheckedCreateWithoutProjectMembershipsInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  emailConfirmation: EmailConfirmationUncheckedCreateNestedOneWithoutUserInput
  firstName: String!
  id: String
  lastName: String!
  passwordHash: String!
  teamMemberships: TeamMembershipUncheckedCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserUncheckedCreateWithoutTeamMembershipsInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  emailConfirmation: EmailConfirmationUncheckedCreateNestedOneWithoutUserInput
  firstName: String!
  id: String
  lastName: String!
  passwordHash: String!
  projectMemberships: ProjectMembershipUncheckedCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserUncheckedUpdateInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailConfirmation: EmailConfirmationUncheckedUpdateOneWithoutUserInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  passwordHash: StringFieldUpdateOperationsInput
  projectMemberships: ProjectMembershipUncheckedUpdateManyWithoutUserInput
  teamMemberships: TeamMembershipUncheckedUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateManyInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  passwordHash: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutEmailConfirmationInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  passwordHash: StringFieldUpdateOperationsInput
  projectMemberships: ProjectMembershipUncheckedUpdateManyWithoutUserInput
  teamMemberships: TeamMembershipUncheckedUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutProjectMembershipsInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailConfirmation: EmailConfirmationUncheckedUpdateOneWithoutUserInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  passwordHash: StringFieldUpdateOperationsInput
  teamMemberships: TeamMembershipUncheckedUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutTeamMembershipsInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailConfirmation: EmailConfirmationUncheckedUpdateOneWithoutUserInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  passwordHash: StringFieldUpdateOperationsInput
  projectMemberships: ProjectMembershipUncheckedUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailConfirmation: EmailConfirmationUpdateOneWithoutUserInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  passwordHash: StringFieldUpdateOperationsInput
  projectMemberships: ProjectMembershipUpdateManyWithoutUserInput
  teamMemberships: TeamMembershipUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  passwordHash: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutEmailConfirmationInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutEmailConfirmationInput
  create: UserUncheckedCreateWithoutEmailConfirmationInput
  update: UserUncheckedUpdateWithoutEmailConfirmationInput
  upsert: UserUpsertWithoutEmailConfirmationInput
}

input UserUpdateOneRequiredWithoutProjectMembershipsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProjectMembershipsInput
  create: UserUncheckedCreateWithoutProjectMembershipsInput
  update: UserUncheckedUpdateWithoutProjectMembershipsInput
  upsert: UserUpsertWithoutProjectMembershipsInput
}

input UserUpdateOneRequiredWithoutTeamMembershipsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTeamMembershipsInput
  create: UserUncheckedCreateWithoutTeamMembershipsInput
  update: UserUncheckedUpdateWithoutTeamMembershipsInput
  upsert: UserUpsertWithoutTeamMembershipsInput
}

input UserUpdateWithoutEmailConfirmationInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  passwordHash: StringFieldUpdateOperationsInput
  projectMemberships: ProjectMembershipUpdateManyWithoutUserInput
  teamMemberships: TeamMembershipUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutProjectMembershipsInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailConfirmation: EmailConfirmationUpdateOneWithoutUserInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  passwordHash: StringFieldUpdateOperationsInput
  teamMemberships: TeamMembershipUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutTeamMembershipsInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailConfirmation: EmailConfirmationUpdateOneWithoutUserInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  passwordHash: StringFieldUpdateOperationsInput
  projectMemberships: ProjectMembershipUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutEmailConfirmationInput {
  create: UserUncheckedCreateWithoutEmailConfirmationInput!
  update: UserUncheckedUpdateWithoutEmailConfirmationInput!
}

input UserUpsertWithoutProjectMembershipsInput {
  create: UserUncheckedCreateWithoutProjectMembershipsInput!
  update: UserUncheckedUpdateWithoutProjectMembershipsInput!
}

input UserUpsertWithoutTeamMembershipsInput {
  create: UserUncheckedCreateWithoutTeamMembershipsInput!
  update: UserUncheckedUpdateWithoutTeamMembershipsInput!
}

input UserWhereInput {
  AND: [UserWhereInput]
  NOT: [UserWhereInput]
  OR: [UserWhereInput]
  confirmed: BoolFilter
  createdAt: DateTimeFilter
  email: StringFilter
  emailConfirmation: EmailConfirmationWhereInput
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  passwordHash: StringFilter
  projectMemberships: ProjectMembershipListRelationFilter
  teamMemberships: TeamMembershipListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

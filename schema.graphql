### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AggregateEmailConfirmation {
  count: EmailConfirmationCountAggregateOutputType
  max: EmailConfirmationMaxAggregateOutputType
  min: EmailConfirmationMinAggregateOutputType
}

type AggregateProject {
  count: ProjectCountAggregateOutputType
  max: ProjectMaxAggregateOutputType
  min: ProjectMinAggregateOutputType
}

type AggregateProjectMembersip {
  count: ProjectMembersipCountAggregateOutputType
  max: ProjectMembersipMaxAggregateOutputType
  min: ProjectMembersipMinAggregateOutputType
}

type AggregateTeam {
  count: TeamCountAggregateOutputType
  max: TeamMaxAggregateOutputType
  min: TeamMinAggregateOutputType
}

type AggregateTeamMembership {
  count: TeamMembershipCountAggregateOutputType
  max: TeamMembershipMaxAggregateOutputType
  min: TeamMembershipMinAggregateOutputType
}

type AggregateUser {
  count: UserCountAggregateOutputType
  max: UserMaxAggregateOutputType
  min: UserMinAggregateOutputType
}

type AggregateUserProfile {
  count: UserProfileCountAggregateOutputType
  max: UserProfileMaxAggregateOutputType
  min: UserProfileMinAggregateOutputType
}

type BatchPayload {
  count: Int!
}

"""BigInt custom scalar type"""
scalar BigInt

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  count: NestedIntFilter
  equals: Boolean
  max: NestedBoolFilter
  min: NestedBoolFilter
  not: NestedBoolWithAggregatesFilter
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""Date custom scalar type"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input DateTimeWithAggregatesFilter {
  count: NestedIntFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  max: NestedDateTimeFilter
  min: NestedDateTimeFilter
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

"""Decimal custom scalar type"""
scalar Decimal

type EmailConfirmationCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  token: Int!
  userId: Int!
}

input EmailConfirmationCreateInput {
  createdAt: DateTime
  token: String!
  user: UserCreateNestedOneWithoutEmailConfirmationInput!
}

input EmailConfirmationCreateManyInput {
  createdAt: DateTime
  token: String!
  userId: String!
}

input EmailConfirmationCreateNestedOneWithoutUserInput {
  connect: EmailConfirmationWhereUniqueInput
  connectOrCreate: EmailConfirmationCreateOrConnectWithoutUserInput
  create: EmailConfirmationUncheckedCreateWithoutUserInput
}

input EmailConfirmationCreateOrConnectWithoutUserInput {
  create: EmailConfirmationUncheckedCreateWithoutUserInput!
  where: EmailConfirmationWhereUniqueInput!
}

input EmailConfirmationCreateWithoutUserInput {
  createdAt: DateTime
  token: String!
}

type EmailConfirmationMaxAggregateOutputType {
  createdAt: DateTime
  token: String
  userId: String
}

type EmailConfirmationMinAggregateOutputType {
  createdAt: DateTime
  token: String
  userId: String
}

input EmailConfirmationOrderByInput {
  createdAt: SortOrder
  token: SortOrder
  userId: SortOrder
}

input EmailConfirmationRelationFilter {
  is: EmailConfirmationWhereInput
  isNot: EmailConfirmationWhereInput
}

enum EmailConfirmationScalarFieldEnum {
  createdAt
  token
  userId
}

input EmailConfirmationScalarWhereWithAggregatesInput {
  AND: [EmailConfirmationScalarWhereWithAggregatesInput]
  NOT: [EmailConfirmationScalarWhereWithAggregatesInput]
  OR: [EmailConfirmationScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  token: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input EmailConfirmationUncheckedCreateInput {
  createdAt: DateTime
  token: String!
  userId: String!
}

input EmailConfirmationUncheckedCreateNestedOneWithoutUserInput {
  connect: EmailConfirmationWhereUniqueInput
  connectOrCreate: EmailConfirmationCreateOrConnectWithoutUserInput
  create: EmailConfirmationUncheckedCreateWithoutUserInput
}

input EmailConfirmationUncheckedCreateWithoutUserInput {
  createdAt: DateTime
  token: String!
}

input EmailConfirmationUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input EmailConfirmationUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input EmailConfirmationUncheckedUpdateOneWithoutUserInput {
  connect: EmailConfirmationWhereUniqueInput
  connectOrCreate: EmailConfirmationCreateOrConnectWithoutUserInput
  create: EmailConfirmationUncheckedCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: EmailConfirmationUncheckedUpdateWithoutUserInput
  upsert: EmailConfirmationUpsertWithoutUserInput
}

input EmailConfirmationUncheckedUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input EmailConfirmationUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutEmailConfirmationInput
}

input EmailConfirmationUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input EmailConfirmationUpdateOneWithoutUserInput {
  connect: EmailConfirmationWhereUniqueInput
  connectOrCreate: EmailConfirmationCreateOrConnectWithoutUserInput
  create: EmailConfirmationUncheckedCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: EmailConfirmationUncheckedUpdateWithoutUserInput
  upsert: EmailConfirmationUpsertWithoutUserInput
}

input EmailConfirmationUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input EmailConfirmationUpsertWithoutUserInput {
  create: EmailConfirmationUncheckedCreateWithoutUserInput!
  update: EmailConfirmationUncheckedUpdateWithoutUserInput!
}

input EmailConfirmationWhereInput {
  AND: [EmailConfirmationWhereInput]
  NOT: [EmailConfirmationWhereInput]
  OR: [EmailConfirmationWhereInput]
  createdAt: DateTimeFilter
  token: StringFilter
  user: UserWhereInput
  userId: StringFilter
}

input EmailConfirmationWhereUniqueInput {
  token: String
  userId: String
}

input EnumMembershipStatusesFieldUpdateOperationsInput {
  set: MembershipStatuses
}

input EnumMembershipStatusesFilter {
  equals: MembershipStatuses
  in: [MembershipStatuses]
  not: NestedEnumMembershipStatusesFilter
  notIn: [MembershipStatuses]
}

input EnumMembershipStatusesWithAggregatesFilter {
  count: NestedIntFilter
  equals: MembershipStatuses
  in: [MembershipStatuses]
  max: NestedEnumMembershipStatusesFilter
  min: NestedEnumMembershipStatusesFilter
  not: NestedEnumMembershipStatusesWithAggregatesFilter
  notIn: [MembershipStatuses]
}

input EnumTeamRolesFieldUpdateOperationsInput {
  set: TeamRoles
}

input EnumTeamRolesFilter {
  equals: TeamRoles
  in: [TeamRoles]
  not: NestedEnumTeamRolesFilter
  notIn: [TeamRoles]
}

input EnumTeamRolesWithAggregatesFilter {
  count: NestedIntFilter
  equals: TeamRoles
  in: [TeamRoles]
  max: NestedEnumTeamRolesFilter
  min: NestedEnumTeamRolesFilter
  not: NestedEnumTeamRolesWithAggregatesFilter
  notIn: [TeamRoles]
}

"""Json custom scalar type"""
scalar Json

enum MembershipStatuses {
  ACCEPTED
  BANNED
  PENDING
}

type Mutation {
  confirmEmail(email: String!, token: String!): User
  createProject(name: String!, teamId: ID!): Project!
  createTeam(name: String!): Team!
  login(code: String!, email: String!): User
  logout: SuccessResponse
  register(email: String!, firstName: String!, lastName: String!): User
  requestLogin(email: String!): SuccessResponse
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  count: NestedIntFilter
  equals: Boolean
  max: NestedBoolFilter
  min: NestedBoolFilter
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input NestedDateTimeWithAggregatesFilter {
  count: NestedIntFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  max: NestedDateTimeFilter
  min: NestedDateTimeFilter
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

input NestedEnumMembershipStatusesFilter {
  equals: MembershipStatuses
  in: [MembershipStatuses]
  not: NestedEnumMembershipStatusesFilter
  notIn: [MembershipStatuses]
}

input NestedEnumMembershipStatusesWithAggregatesFilter {
  count: NestedIntFilter
  equals: MembershipStatuses
  in: [MembershipStatuses]
  max: NestedEnumMembershipStatusesFilter
  min: NestedEnumMembershipStatusesFilter
  not: NestedEnumMembershipStatusesWithAggregatesFilter
  notIn: [MembershipStatuses]
}

input NestedEnumTeamRolesFilter {
  equals: TeamRoles
  in: [TeamRoles]
  not: NestedEnumTeamRolesFilter
  notIn: [TeamRoles]
}

input NestedEnumTeamRolesWithAggregatesFilter {
  count: NestedIntFilter
  equals: TeamRoles
  in: [TeamRoles]
  max: NestedEnumTeamRolesFilter
  min: NestedEnumTeamRolesFilter
  not: NestedEnumTeamRolesWithAggregatesFilter
  notIn: [TeamRoles]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  contains: String
  count: NestedIntFilter
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  max: NestedStringFilter
  min: NestedStringFilter
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

type PaginationParams {
  cursor: ID
  skip: Int
  take: Int
}

type Project {
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type ProjectCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  teamId: Int!
  updatedAt: Int!
}

input ProjectCreateInput {
  createdAt: DateTime
  id: String
  memberships: ProjectMembersipCreateNestedManyWithoutProjectInput
  name: String!
  team: TeamCreateNestedOneWithoutProjectsInput!
  updatedAt: DateTime
}

input ProjectCreateManyInput {
  createdAt: DateTime
  id: String
  name: String!
  teamId: String!
  updatedAt: DateTime
}

input ProjectCreateManyTeamInput {
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input ProjectCreateManyTeamInputEnvelope {
  data: ProjectCreateManyTeamInput!
  skipDuplicates: Boolean
}

input ProjectCreateNestedManyWithoutTeamInput {
  connect: [ProjectWhereUniqueInput]
  connectOrCreate: [ProjectCreateOrConnectWithoutTeamInput]
  create: [ProjectCreateWithoutTeamInput]
  createMany: ProjectCreateManyTeamInputEnvelope
}

input ProjectCreateNestedOneWithoutMembershipsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutMembershipsInput
  create: ProjectUncheckedCreateWithoutMembershipsInput
}

input ProjectCreateOrConnectWithoutMembershipsInput {
  create: ProjectUncheckedCreateWithoutMembershipsInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutTeamInput {
  create: ProjectUncheckedCreateWithoutTeamInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateWithoutMembershipsInput {
  createdAt: DateTime
  id: String
  name: String!
  team: TeamCreateNestedOneWithoutProjectsInput!
  updatedAt: DateTime
}

input ProjectCreateWithoutTeamInput {
  createdAt: DateTime
  id: String
  memberships: ProjectMembersipCreateNestedManyWithoutProjectInput
  name: String!
  updatedAt: DateTime
}

input ProjectListRelationFilter {
  every: ProjectWhereInput
  none: ProjectWhereInput
  some: ProjectWhereInput
}

type ProjectMaxAggregateOutputType {
  createdAt: DateTime
  id: String
  name: String
  teamId: String
  updatedAt: DateTime
}

type ProjectMembership {
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
  user: User
}

type ProjectMembersipCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  id: Int!
  projectId: Int!
  updatedAt: Int!
  userId: Int!
}

input ProjectMembersipCreateInput {
  createdAt: DateTime
  id: String
  project: ProjectCreateNestedOneWithoutMembershipsInput!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutProjectMembersipInput!
}

input ProjectMembersipCreateManyInput {
  createdAt: DateTime
  id: String
  projectId: String!
  updatedAt: DateTime
  userId: String!
}

input ProjectMembersipCreateManyProjectInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  userId: String!
}

input ProjectMembersipCreateManyProjectInputEnvelope {
  data: ProjectMembersipCreateManyProjectInput!
  skipDuplicates: Boolean
}

input ProjectMembersipCreateManyUserInput {
  createdAt: DateTime
  id: String
  projectId: String!
  updatedAt: DateTime
}

input ProjectMembersipCreateManyUserInputEnvelope {
  data: ProjectMembersipCreateManyUserInput!
  skipDuplicates: Boolean
}

input ProjectMembersipCreateNestedManyWithoutProjectInput {
  connect: [ProjectMembersipWhereUniqueInput]
  connectOrCreate: [ProjectMembersipCreateOrConnectWithoutProjectInput]
  create: [ProjectMembersipCreateWithoutProjectInput]
  createMany: ProjectMembersipCreateManyProjectInputEnvelope
}

input ProjectMembersipCreateNestedManyWithoutUserInput {
  connect: [ProjectMembersipWhereUniqueInput]
  connectOrCreate: [ProjectMembersipCreateOrConnectWithoutUserInput]
  create: [ProjectMembersipCreateWithoutUserInput]
  createMany: ProjectMembersipCreateManyUserInputEnvelope
}

input ProjectMembersipCreateOrConnectWithoutProjectInput {
  create: ProjectMembersipUncheckedCreateWithoutProjectInput!
  where: ProjectMembersipWhereUniqueInput!
}

input ProjectMembersipCreateOrConnectWithoutUserInput {
  create: ProjectMembersipUncheckedCreateWithoutUserInput!
  where: ProjectMembersipWhereUniqueInput!
}

input ProjectMembersipCreateWithoutProjectInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutProjectMembersipInput!
}

input ProjectMembersipCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  project: ProjectCreateNestedOneWithoutMembershipsInput!
  updatedAt: DateTime
}

input ProjectMembersipListRelationFilter {
  every: ProjectMembersipWhereInput
  none: ProjectMembersipWhereInput
  some: ProjectMembersipWhereInput
}

type ProjectMembersipMaxAggregateOutputType {
  createdAt: DateTime
  id: String
  projectId: String
  updatedAt: DateTime
  userId: String
}

type ProjectMembersipMinAggregateOutputType {
  createdAt: DateTime
  id: String
  projectId: String
  updatedAt: DateTime
  userId: String
}

input ProjectMembersipOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  projectId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

enum ProjectMembersipScalarFieldEnum {
  createdAt
  id
  projectId
  updatedAt
  userId
}

input ProjectMembersipScalarWhereInput {
  AND: [ProjectMembersipScalarWhereInput]
  NOT: [ProjectMembersipScalarWhereInput]
  OR: [ProjectMembersipScalarWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  projectId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input ProjectMembersipScalarWhereWithAggregatesInput {
  AND: [ProjectMembersipScalarWhereWithAggregatesInput]
  NOT: [ProjectMembersipScalarWhereWithAggregatesInput]
  OR: [ProjectMembersipScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  projectId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input ProjectMembersipUncheckedCreateInput {
  createdAt: DateTime
  id: String
  projectId: String!
  updatedAt: DateTime
  userId: String!
}

input ProjectMembersipUncheckedCreateNestedManyWithoutProjectInput {
  connect: [ProjectMembersipWhereUniqueInput]
  connectOrCreate: [ProjectMembersipCreateOrConnectWithoutProjectInput]
  create: [ProjectMembersipCreateWithoutProjectInput]
  createMany: ProjectMembersipCreateManyProjectInputEnvelope
}

input ProjectMembersipUncheckedCreateNestedManyWithoutUserInput {
  connect: [ProjectMembersipWhereUniqueInput]
  connectOrCreate: [ProjectMembersipCreateOrConnectWithoutUserInput]
  create: [ProjectMembersipCreateWithoutUserInput]
  createMany: ProjectMembersipCreateManyUserInputEnvelope
}

input ProjectMembersipUncheckedCreateWithoutProjectInput {
  createdAt: DateTime
  id: String
  updatedAt: DateTime
  userId: String!
}

input ProjectMembersipUncheckedCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  projectId: String!
  updatedAt: DateTime
}

input ProjectMembersipUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  projectId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input ProjectMembersipUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  projectId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input ProjectMembersipUncheckedUpdateManyWithoutMembershipsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input ProjectMembersipUncheckedUpdateManyWithoutProjectInput {
  connect: [ProjectMembersipWhereUniqueInput]
  connectOrCreate: [ProjectMembersipCreateOrConnectWithoutProjectInput]
  create: [ProjectMembersipCreateWithoutProjectInput]
  createMany: ProjectMembersipCreateManyProjectInputEnvelope
  delete: [ProjectMembersipWhereUniqueInput]
  deleteMany: [ProjectMembersipScalarWhereInput]
  disconnect: [ProjectMembersipWhereUniqueInput]
  set: [ProjectMembersipWhereUniqueInput]
  update: [ProjectMembersipUpdateWithWhereUniqueWithoutProjectInput]
  updateMany: [ProjectMembersipUpdateManyWithWhereWithoutProjectInput]
  upsert: [ProjectMembersipUpsertWithWhereUniqueWithoutProjectInput]
}

input ProjectMembersipUncheckedUpdateManyWithoutProjectMembersipInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  projectId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectMembersipUncheckedUpdateManyWithoutUserInput {
  connect: [ProjectMembersipWhereUniqueInput]
  connectOrCreate: [ProjectMembersipCreateOrConnectWithoutUserInput]
  create: [ProjectMembersipCreateWithoutUserInput]
  createMany: ProjectMembersipCreateManyUserInputEnvelope
  delete: [ProjectMembersipWhereUniqueInput]
  deleteMany: [ProjectMembersipScalarWhereInput]
  disconnect: [ProjectMembersipWhereUniqueInput]
  set: [ProjectMembersipWhereUniqueInput]
  update: [ProjectMembersipUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ProjectMembersipUpdateManyWithWhereWithoutUserInput]
  upsert: [ProjectMembersipUpsertWithWhereUniqueWithoutUserInput]
}

input ProjectMembersipUncheckedUpdateWithoutProjectInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input ProjectMembersipUncheckedUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  projectId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectMembersipUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMembershipsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProjectMembersipInput
}

input ProjectMembersipUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectMembersipUpdateManyWithWhereWithoutProjectInput {
  data: ProjectMembersipUncheckedUpdateManyWithoutMembershipsInput!
  where: ProjectMembersipScalarWhereInput!
}

input ProjectMembersipUpdateManyWithWhereWithoutUserInput {
  data: ProjectMembersipUncheckedUpdateManyWithoutProjectMembersipInput!
  where: ProjectMembersipScalarWhereInput!
}

input ProjectMembersipUpdateManyWithoutProjectInput {
  connect: [ProjectMembersipWhereUniqueInput]
  connectOrCreate: [ProjectMembersipCreateOrConnectWithoutProjectInput]
  create: [ProjectMembersipCreateWithoutProjectInput]
  createMany: ProjectMembersipCreateManyProjectInputEnvelope
  delete: [ProjectMembersipWhereUniqueInput]
  deleteMany: [ProjectMembersipScalarWhereInput]
  disconnect: [ProjectMembersipWhereUniqueInput]
  set: [ProjectMembersipWhereUniqueInput]
  update: [ProjectMembersipUpdateWithWhereUniqueWithoutProjectInput]
  updateMany: [ProjectMembersipUpdateManyWithWhereWithoutProjectInput]
  upsert: [ProjectMembersipUpsertWithWhereUniqueWithoutProjectInput]
}

input ProjectMembersipUpdateManyWithoutUserInput {
  connect: [ProjectMembersipWhereUniqueInput]
  connectOrCreate: [ProjectMembersipCreateOrConnectWithoutUserInput]
  create: [ProjectMembersipCreateWithoutUserInput]
  createMany: ProjectMembersipCreateManyUserInputEnvelope
  delete: [ProjectMembersipWhereUniqueInput]
  deleteMany: [ProjectMembersipScalarWhereInput]
  disconnect: [ProjectMembersipWhereUniqueInput]
  set: [ProjectMembersipWhereUniqueInput]
  update: [ProjectMembersipUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ProjectMembersipUpdateManyWithWhereWithoutUserInput]
  upsert: [ProjectMembersipUpsertWithWhereUniqueWithoutUserInput]
}

input ProjectMembersipUpdateWithWhereUniqueWithoutProjectInput {
  data: ProjectMembersipUncheckedUpdateWithoutProjectInput!
  where: ProjectMembersipWhereUniqueInput!
}

input ProjectMembersipUpdateWithWhereUniqueWithoutUserInput {
  data: ProjectMembersipUncheckedUpdateWithoutUserInput!
  where: ProjectMembersipWhereUniqueInput!
}

input ProjectMembersipUpdateWithoutProjectInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProjectMembersipInput
}

input ProjectMembersipUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutMembershipsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectMembersipUpsertWithWhereUniqueWithoutProjectInput {
  create: ProjectMembersipUncheckedCreateWithoutProjectInput!
  update: ProjectMembersipUncheckedUpdateWithoutProjectInput!
  where: ProjectMembersipWhereUniqueInput!
}

input ProjectMembersipUpsertWithWhereUniqueWithoutUserInput {
  create: ProjectMembersipUncheckedCreateWithoutUserInput!
  update: ProjectMembersipUncheckedUpdateWithoutUserInput!
  where: ProjectMembersipWhereUniqueInput!
}

input ProjectMembersipUserIdProjectIdCompoundUniqueInput {
  projectId: String!
  userId: String!
}

input ProjectMembersipWhereInput {
  AND: [ProjectMembersipWhereInput]
  NOT: [ProjectMembersipWhereInput]
  OR: [ProjectMembersipWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  project: ProjectWhereInput
  projectId: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input ProjectMembersipWhereUniqueInput {
  id: String
  userId_projectId: ProjectMembersipUserIdProjectIdCompoundUniqueInput
}

type ProjectMinAggregateOutputType {
  createdAt: DateTime
  id: String
  name: String
  teamId: String
  updatedAt: DateTime
}

input ProjectOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  teamId: SortOrder
  updatedAt: SortOrder
}

input ProjectRelationFilter {
  is: ProjectWhereInput
  isNot: ProjectWhereInput
}

enum ProjectScalarFieldEnum {
  createdAt
  id
  name
  teamId
  updatedAt
}

input ProjectScalarWhereInput {
  AND: [ProjectScalarWhereInput]
  NOT: [ProjectScalarWhereInput]
  OR: [ProjectScalarWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  teamId: StringFilter
  updatedAt: DateTimeFilter
}

input ProjectScalarWhereWithAggregatesInput {
  AND: [ProjectScalarWhereWithAggregatesInput]
  NOT: [ProjectScalarWhereWithAggregatesInput]
  OR: [ProjectScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  teamId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ProjectUncheckedCreateInput {
  createdAt: DateTime
  id: String
  memberships: ProjectMembersipUncheckedCreateNestedManyWithoutProjectInput
  name: String!
  teamId: String!
  updatedAt: DateTime
}

input ProjectUncheckedCreateNestedManyWithoutTeamInput {
  connect: [ProjectWhereUniqueInput]
  connectOrCreate: [ProjectCreateOrConnectWithoutTeamInput]
  create: [ProjectCreateWithoutTeamInput]
  createMany: ProjectCreateManyTeamInputEnvelope
}

input ProjectUncheckedCreateWithoutMembershipsInput {
  createdAt: DateTime
  id: String
  name: String!
  teamId: String!
  updatedAt: DateTime
}

input ProjectUncheckedCreateWithoutTeamInput {
  createdAt: DateTime
  id: String
  memberships: ProjectMembersipUncheckedCreateNestedManyWithoutProjectInput
  name: String!
  updatedAt: DateTime
}

input ProjectUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  memberships: ProjectMembersipUncheckedUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  teamId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  teamId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUncheckedUpdateManyWithoutProjectsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUncheckedUpdateManyWithoutTeamInput {
  connect: [ProjectWhereUniqueInput]
  connectOrCreate: [ProjectCreateOrConnectWithoutTeamInput]
  create: [ProjectCreateWithoutTeamInput]
  createMany: ProjectCreateManyTeamInputEnvelope
  delete: [ProjectWhereUniqueInput]
  deleteMany: [ProjectScalarWhereInput]
  disconnect: [ProjectWhereUniqueInput]
  set: [ProjectWhereUniqueInput]
  update: [ProjectUpdateWithWhereUniqueWithoutTeamInput]
  updateMany: [ProjectUpdateManyWithWhereWithoutTeamInput]
  upsert: [ProjectUpsertWithWhereUniqueWithoutTeamInput]
}

input ProjectUncheckedUpdateWithoutMembershipsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  teamId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUncheckedUpdateWithoutTeamInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  memberships: ProjectMembersipUncheckedUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  memberships: ProjectMembersipUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  team: TeamUpdateOneRequiredWithoutProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyWithWhereWithoutTeamInput {
  data: ProjectUncheckedUpdateManyWithoutProjectsInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateManyWithoutTeamInput {
  connect: [ProjectWhereUniqueInput]
  connectOrCreate: [ProjectCreateOrConnectWithoutTeamInput]
  create: [ProjectCreateWithoutTeamInput]
  createMany: ProjectCreateManyTeamInputEnvelope
  delete: [ProjectWhereUniqueInput]
  deleteMany: [ProjectScalarWhereInput]
  disconnect: [ProjectWhereUniqueInput]
  set: [ProjectWhereUniqueInput]
  update: [ProjectUpdateWithWhereUniqueWithoutTeamInput]
  updateMany: [ProjectUpdateManyWithWhereWithoutTeamInput]
  upsert: [ProjectUpsertWithWhereUniqueWithoutTeamInput]
}

input ProjectUpdateOneRequiredWithoutMembershipsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutMembershipsInput
  create: ProjectUncheckedCreateWithoutMembershipsInput
  update: ProjectUncheckedUpdateWithoutMembershipsInput
  upsert: ProjectUpsertWithoutMembershipsInput
}

input ProjectUpdateWithWhereUniqueWithoutTeamInput {
  data: ProjectUncheckedUpdateWithoutTeamInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithoutMembershipsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  team: TeamUpdateOneRequiredWithoutProjectsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithoutTeamInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  memberships: ProjectMembersipUpdateManyWithoutProjectInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpsertWithWhereUniqueWithoutTeamInput {
  create: ProjectUncheckedCreateWithoutTeamInput!
  update: ProjectUncheckedUpdateWithoutTeamInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithoutMembershipsInput {
  create: ProjectUncheckedCreateWithoutMembershipsInput!
  update: ProjectUncheckedUpdateWithoutMembershipsInput!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput]
  NOT: [ProjectWhereInput]
  OR: [ProjectWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  memberships: ProjectMembersipListRelationFilter
  name: StringFilter
  team: TeamWhereInput
  teamId: StringFilter
  updatedAt: DateTimeFilter
}

input ProjectWhereUniqueInput {
  id: String
}

type Query {
  listTeamMembersips: [TeamMembership]!
  listTeams(cursor: ID, skip: Int, take: Int): [Team]!
  me: User
  team(id: ID!): Team!
  teamMembership(id: String!): TeamMembership!
}

enum QueryMode {
  default
  insensitive
}

input RegisterInput {
  email: String!
  firstName: String!
  lastName: String!
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input StringWithAggregatesFilter {
  contains: String
  count: NestedIntFilter
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  max: NestedStringFilter
  min: NestedStringFilter
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

type SuccessResponse {
  success: Boolean!
}

type Team {
  createdAt: DateTime!
  id: ID!
  memberships: TeamMembership
  name: String!
  projects: Project
  updatedAt: DateTime!
}

type TeamCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
}

input TeamCreateInput {
  createdAt: DateTime
  id: String
  memberships: TeamMembershipCreateNestedManyWithoutTeamInput
  name: String!
  projects: ProjectCreateNestedManyWithoutTeamInput
  updatedAt: DateTime
}

input TeamCreateManyInput {
  createdAt: DateTime
  id: String
  name: String!
  updatedAt: DateTime
}

input TeamCreateNestedOneWithoutMembershipsInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutMembershipsInput
  create: TeamUncheckedCreateWithoutMembershipsInput
}

input TeamCreateNestedOneWithoutProjectsInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutProjectsInput
  create: TeamUncheckedCreateWithoutProjectsInput
}

input TeamCreateOrConnectWithoutMembershipsInput {
  create: TeamUncheckedCreateWithoutMembershipsInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateOrConnectWithoutProjectsInput {
  create: TeamUncheckedCreateWithoutProjectsInput!
  where: TeamWhereUniqueInput!
}

input TeamCreateWithoutMembershipsInput {
  createdAt: DateTime
  id: String
  name: String!
  projects: ProjectCreateNestedManyWithoutTeamInput
  updatedAt: DateTime
}

input TeamCreateWithoutProjectsInput {
  createdAt: DateTime
  id: String
  memberships: TeamMembershipCreateNestedManyWithoutTeamInput
  name: String!
  updatedAt: DateTime
}

type TeamMaxAggregateOutputType {
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

type TeamMembership {
  createdAt: DateTime!
  id: ID!
  role: TeamRoles!
  status: MembershipStatuses!
  team: Team
  updatedAt: DateTime!
  user: User
}

type TeamMembershipCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  id: Int!
  role: Int!
  status: Int!
  teamId: Int!
  updatedAt: Int!
  userId: Int!
}

input TeamMembershipCreateInput {
  createdAt: DateTime
  id: String
  role: TeamRoles
  status: MembershipStatuses
  team: TeamCreateNestedOneWithoutMembershipsInput!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutTeamMembershipsInput!
}

input TeamMembershipCreateManyInput {
  createdAt: DateTime
  id: String
  role: TeamRoles
  status: MembershipStatuses
  teamId: String!
  updatedAt: DateTime
  userId: String!
}

input TeamMembershipCreateManyTeamInput {
  createdAt: DateTime
  id: String
  role: TeamRoles
  status: MembershipStatuses
  updatedAt: DateTime
  userId: String!
}

input TeamMembershipCreateManyTeamInputEnvelope {
  data: TeamMembershipCreateManyTeamInput!
  skipDuplicates: Boolean
}

input TeamMembershipCreateManyUserInput {
  createdAt: DateTime
  id: String
  role: TeamRoles
  status: MembershipStatuses
  teamId: String!
  updatedAt: DateTime
}

input TeamMembershipCreateManyUserInputEnvelope {
  data: TeamMembershipCreateManyUserInput!
  skipDuplicates: Boolean
}

input TeamMembershipCreateNestedManyWithoutTeamInput {
  connect: [TeamMembershipWhereUniqueInput]
  connectOrCreate: [TeamMembershipCreateOrConnectWithoutTeamInput]
  create: [TeamMembershipCreateWithoutTeamInput]
  createMany: TeamMembershipCreateManyTeamInputEnvelope
}

input TeamMembershipCreateNestedManyWithoutUserInput {
  connect: [TeamMembershipWhereUniqueInput]
  connectOrCreate: [TeamMembershipCreateOrConnectWithoutUserInput]
  create: [TeamMembershipCreateWithoutUserInput]
  createMany: TeamMembershipCreateManyUserInputEnvelope
}

input TeamMembershipCreateOrConnectWithoutTeamInput {
  create: TeamMembershipUncheckedCreateWithoutTeamInput!
  where: TeamMembershipWhereUniqueInput!
}

input TeamMembershipCreateOrConnectWithoutUserInput {
  create: TeamMembershipUncheckedCreateWithoutUserInput!
  where: TeamMembershipWhereUniqueInput!
}

input TeamMembershipCreateWithoutTeamInput {
  createdAt: DateTime
  id: String
  role: TeamRoles
  status: MembershipStatuses
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutTeamMembershipsInput!
}

input TeamMembershipCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  role: TeamRoles
  status: MembershipStatuses
  team: TeamCreateNestedOneWithoutMembershipsInput!
  updatedAt: DateTime
}

input TeamMembershipListRelationFilter {
  every: TeamMembershipWhereInput
  none: TeamMembershipWhereInput
  some: TeamMembershipWhereInput
}

type TeamMembershipMaxAggregateOutputType {
  createdAt: DateTime
  id: String
  role: TeamRoles
  status: MembershipStatuses
  teamId: String
  updatedAt: DateTime
  userId: String
}

type TeamMembershipMinAggregateOutputType {
  createdAt: DateTime
  id: String
  role: TeamRoles
  status: MembershipStatuses
  teamId: String
  updatedAt: DateTime
  userId: String
}

input TeamMembershipOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  role: SortOrder
  status: SortOrder
  teamId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

enum TeamMembershipScalarFieldEnum {
  createdAt
  id
  role
  status
  teamId
  updatedAt
  userId
}

input TeamMembershipScalarWhereInput {
  AND: [TeamMembershipScalarWhereInput]
  NOT: [TeamMembershipScalarWhereInput]
  OR: [TeamMembershipScalarWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  role: EnumTeamRolesFilter
  status: EnumMembershipStatusesFilter
  teamId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input TeamMembershipScalarWhereWithAggregatesInput {
  AND: [TeamMembershipScalarWhereWithAggregatesInput]
  NOT: [TeamMembershipScalarWhereWithAggregatesInput]
  OR: [TeamMembershipScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  role: EnumTeamRolesWithAggregatesFilter
  status: EnumMembershipStatusesWithAggregatesFilter
  teamId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input TeamMembershipUncheckedCreateInput {
  createdAt: DateTime
  id: String
  role: TeamRoles
  status: MembershipStatuses
  teamId: String!
  updatedAt: DateTime
  userId: String!
}

input TeamMembershipUncheckedCreateNestedManyWithoutTeamInput {
  connect: [TeamMembershipWhereUniqueInput]
  connectOrCreate: [TeamMembershipCreateOrConnectWithoutTeamInput]
  create: [TeamMembershipCreateWithoutTeamInput]
  createMany: TeamMembershipCreateManyTeamInputEnvelope
}

input TeamMembershipUncheckedCreateNestedManyWithoutUserInput {
  connect: [TeamMembershipWhereUniqueInput]
  connectOrCreate: [TeamMembershipCreateOrConnectWithoutUserInput]
  create: [TeamMembershipCreateWithoutUserInput]
  createMany: TeamMembershipCreateManyUserInputEnvelope
}

input TeamMembershipUncheckedCreateWithoutTeamInput {
  createdAt: DateTime
  id: String
  role: TeamRoles
  status: MembershipStatuses
  updatedAt: DateTime
  userId: String!
}

input TeamMembershipUncheckedCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  role: TeamRoles
  status: MembershipStatuses
  teamId: String!
  updatedAt: DateTime
}

input TeamMembershipUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  status: EnumMembershipStatusesFieldUpdateOperationsInput
  teamId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input TeamMembershipUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  status: EnumMembershipStatusesFieldUpdateOperationsInput
  teamId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input TeamMembershipUncheckedUpdateManyWithoutMembershipsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  status: EnumMembershipStatusesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input TeamMembershipUncheckedUpdateManyWithoutTeamInput {
  connect: [TeamMembershipWhereUniqueInput]
  connectOrCreate: [TeamMembershipCreateOrConnectWithoutTeamInput]
  create: [TeamMembershipCreateWithoutTeamInput]
  createMany: TeamMembershipCreateManyTeamInputEnvelope
  delete: [TeamMembershipWhereUniqueInput]
  deleteMany: [TeamMembershipScalarWhereInput]
  disconnect: [TeamMembershipWhereUniqueInput]
  set: [TeamMembershipWhereUniqueInput]
  update: [TeamMembershipUpdateWithWhereUniqueWithoutTeamInput]
  updateMany: [TeamMembershipUpdateManyWithWhereWithoutTeamInput]
  upsert: [TeamMembershipUpsertWithWhereUniqueWithoutTeamInput]
}

input TeamMembershipUncheckedUpdateManyWithoutTeamMembershipsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  status: EnumMembershipStatusesFieldUpdateOperationsInput
  teamId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamMembershipUncheckedUpdateManyWithoutUserInput {
  connect: [TeamMembershipWhereUniqueInput]
  connectOrCreate: [TeamMembershipCreateOrConnectWithoutUserInput]
  create: [TeamMembershipCreateWithoutUserInput]
  createMany: TeamMembershipCreateManyUserInputEnvelope
  delete: [TeamMembershipWhereUniqueInput]
  deleteMany: [TeamMembershipScalarWhereInput]
  disconnect: [TeamMembershipWhereUniqueInput]
  set: [TeamMembershipWhereUniqueInput]
  update: [TeamMembershipUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [TeamMembershipUpdateManyWithWhereWithoutUserInput]
  upsert: [TeamMembershipUpsertWithWhereUniqueWithoutUserInput]
}

input TeamMembershipUncheckedUpdateWithoutTeamInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  status: EnumMembershipStatusesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input TeamMembershipUncheckedUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  status: EnumMembershipStatusesFieldUpdateOperationsInput
  teamId: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamMembershipUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  status: EnumMembershipStatusesFieldUpdateOperationsInput
  team: TeamUpdateOneRequiredWithoutMembershipsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTeamMembershipsInput
}

input TeamMembershipUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  status: EnumMembershipStatusesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamMembershipUpdateManyWithWhereWithoutTeamInput {
  data: TeamMembershipUncheckedUpdateManyWithoutMembershipsInput!
  where: TeamMembershipScalarWhereInput!
}

input TeamMembershipUpdateManyWithWhereWithoutUserInput {
  data: TeamMembershipUncheckedUpdateManyWithoutTeamMembershipsInput!
  where: TeamMembershipScalarWhereInput!
}

input TeamMembershipUpdateManyWithoutTeamInput {
  connect: [TeamMembershipWhereUniqueInput]
  connectOrCreate: [TeamMembershipCreateOrConnectWithoutTeamInput]
  create: [TeamMembershipCreateWithoutTeamInput]
  createMany: TeamMembershipCreateManyTeamInputEnvelope
  delete: [TeamMembershipWhereUniqueInput]
  deleteMany: [TeamMembershipScalarWhereInput]
  disconnect: [TeamMembershipWhereUniqueInput]
  set: [TeamMembershipWhereUniqueInput]
  update: [TeamMembershipUpdateWithWhereUniqueWithoutTeamInput]
  updateMany: [TeamMembershipUpdateManyWithWhereWithoutTeamInput]
  upsert: [TeamMembershipUpsertWithWhereUniqueWithoutTeamInput]
}

input TeamMembershipUpdateManyWithoutUserInput {
  connect: [TeamMembershipWhereUniqueInput]
  connectOrCreate: [TeamMembershipCreateOrConnectWithoutUserInput]
  create: [TeamMembershipCreateWithoutUserInput]
  createMany: TeamMembershipCreateManyUserInputEnvelope
  delete: [TeamMembershipWhereUniqueInput]
  deleteMany: [TeamMembershipScalarWhereInput]
  disconnect: [TeamMembershipWhereUniqueInput]
  set: [TeamMembershipWhereUniqueInput]
  update: [TeamMembershipUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [TeamMembershipUpdateManyWithWhereWithoutUserInput]
  upsert: [TeamMembershipUpsertWithWhereUniqueWithoutUserInput]
}

input TeamMembershipUpdateWithWhereUniqueWithoutTeamInput {
  data: TeamMembershipUncheckedUpdateWithoutTeamInput!
  where: TeamMembershipWhereUniqueInput!
}

input TeamMembershipUpdateWithWhereUniqueWithoutUserInput {
  data: TeamMembershipUncheckedUpdateWithoutUserInput!
  where: TeamMembershipWhereUniqueInput!
}

input TeamMembershipUpdateWithoutTeamInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  status: EnumMembershipStatusesFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTeamMembershipsInput
}

input TeamMembershipUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  role: EnumTeamRolesFieldUpdateOperationsInput
  status: EnumMembershipStatusesFieldUpdateOperationsInput
  team: TeamUpdateOneRequiredWithoutMembershipsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamMembershipUpsertWithWhereUniqueWithoutTeamInput {
  create: TeamMembershipUncheckedCreateWithoutTeamInput!
  update: TeamMembershipUncheckedUpdateWithoutTeamInput!
  where: TeamMembershipWhereUniqueInput!
}

input TeamMembershipUpsertWithWhereUniqueWithoutUserInput {
  create: TeamMembershipUncheckedCreateWithoutUserInput!
  update: TeamMembershipUncheckedUpdateWithoutUserInput!
  where: TeamMembershipWhereUniqueInput!
}

input TeamMembershipUserIdTeamIdCompoundUniqueInput {
  teamId: String!
  userId: String!
}

input TeamMembershipWhereInput {
  AND: [TeamMembershipWhereInput]
  NOT: [TeamMembershipWhereInput]
  OR: [TeamMembershipWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  role: EnumTeamRolesFilter
  status: EnumMembershipStatusesFilter
  team: TeamWhereInput
  teamId: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input TeamMembershipWhereUniqueInput {
  id: String
  userId_teamId: TeamMembershipUserIdTeamIdCompoundUniqueInput
}

type TeamMinAggregateOutputType {
  createdAt: DateTime
  id: String
  name: String
  updatedAt: DateTime
}

input TeamOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input TeamRelationFilter {
  is: TeamWhereInput
  isNot: TeamWhereInput
}

enum TeamRoles {
  ADMIN
  BILLING
  MEMBER
}

enum TeamScalarFieldEnum {
  createdAt
  id
  name
  updatedAt
}

input TeamScalarWhereWithAggregatesInput {
  AND: [TeamScalarWhereWithAggregatesInput]
  NOT: [TeamScalarWhereWithAggregatesInput]
  OR: [TeamScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input TeamUncheckedCreateInput {
  createdAt: DateTime
  id: String
  memberships: TeamMembershipUncheckedCreateNestedManyWithoutTeamInput
  name: String!
  projects: ProjectUncheckedCreateNestedManyWithoutTeamInput
  updatedAt: DateTime
}

input TeamUncheckedCreateWithoutMembershipsInput {
  createdAt: DateTime
  id: String
  name: String!
  projects: ProjectUncheckedCreateNestedManyWithoutTeamInput
  updatedAt: DateTime
}

input TeamUncheckedCreateWithoutProjectsInput {
  createdAt: DateTime
  id: String
  memberships: TeamMembershipUncheckedCreateNestedManyWithoutTeamInput
  name: String!
  updatedAt: DateTime
}

input TeamUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  memberships: TeamMembershipUncheckedUpdateManyWithoutTeamInput
  name: StringFieldUpdateOperationsInput
  projects: ProjectUncheckedUpdateManyWithoutTeamInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamUncheckedUpdateWithoutMembershipsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  projects: ProjectUncheckedUpdateManyWithoutTeamInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamUncheckedUpdateWithoutProjectsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  memberships: TeamMembershipUncheckedUpdateManyWithoutTeamInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  memberships: TeamMembershipUpdateManyWithoutTeamInput
  name: StringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutTeamInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamUpdateOneRequiredWithoutMembershipsInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutMembershipsInput
  create: TeamUncheckedCreateWithoutMembershipsInput
  update: TeamUncheckedUpdateWithoutMembershipsInput
  upsert: TeamUpsertWithoutMembershipsInput
}

input TeamUpdateOneRequiredWithoutProjectsInput {
  connect: TeamWhereUniqueInput
  connectOrCreate: TeamCreateOrConnectWithoutProjectsInput
  create: TeamUncheckedCreateWithoutProjectsInput
  update: TeamUncheckedUpdateWithoutProjectsInput
  upsert: TeamUpsertWithoutProjectsInput
}

input TeamUpdateWithoutMembershipsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutTeamInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamUpdateWithoutProjectsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  memberships: TeamMembershipUpdateManyWithoutTeamInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TeamUpsertWithoutMembershipsInput {
  create: TeamUncheckedCreateWithoutMembershipsInput!
  update: TeamUncheckedUpdateWithoutMembershipsInput!
}

input TeamUpsertWithoutProjectsInput {
  create: TeamUncheckedCreateWithoutProjectsInput!
  update: TeamUncheckedUpdateWithoutProjectsInput!
}

input TeamWhereInput {
  AND: [TeamWhereInput]
  NOT: [TeamWhereInput]
  OR: [TeamWhereInput]
  createdAt: DateTimeFilter
  id: StringFilter
  memberships: TeamMembershipListRelationFilter
  name: StringFilter
  projects: ProjectListRelationFilter
  updatedAt: DateTimeFilter
}

input TeamWhereUniqueInput {
  id: String
}

type User {
  confirmed: Boolean!
  email: String!
  id: ID!
  profile: UserProfile
}

type UserCountAggregateOutputType {
  _all: Int!
  confirmed: Int!
  createdAt: Int!
  email: Int!
  id: Int!
  updatedAt: Int!
}

input UserCreateInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  emailConfirmation: EmailConfirmationCreateNestedOneWithoutUserInput
  id: String
  profile: UserProfileCreateNestedOneWithoutUserInput
  projectMembersip: ProjectMembersipCreateNestedManyWithoutUserInput
  teamMemberships: TeamMembershipCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserCreateManyInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  id: String
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutEmailConfirmationInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutEmailConfirmationInput
  create: UserUncheckedCreateWithoutEmailConfirmationInput
}

input UserCreateNestedOneWithoutProfileInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProfileInput
  create: UserUncheckedCreateWithoutProfileInput
}

input UserCreateNestedOneWithoutProjectMembersipInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProjectMembersipInput
  create: UserUncheckedCreateWithoutProjectMembersipInput
}

input UserCreateNestedOneWithoutTeamMembershipsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTeamMembershipsInput
  create: UserUncheckedCreateWithoutTeamMembershipsInput
}

input UserCreateOrConnectWithoutEmailConfirmationInput {
  create: UserUncheckedCreateWithoutEmailConfirmationInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutProfileInput {
  create: UserUncheckedCreateWithoutProfileInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutProjectMembersipInput {
  create: UserUncheckedCreateWithoutProjectMembersipInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTeamMembershipsInput {
  create: UserUncheckedCreateWithoutTeamMembershipsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutEmailConfirmationInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  id: String
  profile: UserProfileCreateNestedOneWithoutUserInput
  projectMembersip: ProjectMembersipCreateNestedManyWithoutUserInput
  teamMemberships: TeamMembershipCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserCreateWithoutProfileInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  emailConfirmation: EmailConfirmationCreateNestedOneWithoutUserInput
  id: String
  projectMembersip: ProjectMembersipCreateNestedManyWithoutUserInput
  teamMemberships: TeamMembershipCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserCreateWithoutProjectMembersipInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  emailConfirmation: EmailConfirmationCreateNestedOneWithoutUserInput
  id: String
  profile: UserProfileCreateNestedOneWithoutUserInput
  teamMemberships: TeamMembershipCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserCreateWithoutTeamMembershipsInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  emailConfirmation: EmailConfirmationCreateNestedOneWithoutUserInput
  id: String
  profile: UserProfileCreateNestedOneWithoutUserInput
  projectMembersip: ProjectMembersipCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

type UserMaxAggregateOutputType {
  confirmed: Boolean
  createdAt: DateTime
  email: String
  id: String
  updatedAt: DateTime
}

type UserMinAggregateOutputType {
  confirmed: Boolean
  createdAt: DateTime
  email: String
  id: String
  updatedAt: DateTime
}

input UserOrderByInput {
  confirmed: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

type UserProfile {
  firstName: String!
  fullName: String!
  id: ID!
  lastName: String!
}

type UserProfileCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  firstName: Int!
  id: Int!
  lastName: Int!
  updatedAt: Int!
  userId: Int!
}

input UserProfileCreateInput {
  createdAt: DateTime
  firstName: String!
  id: String
  lastName: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutProfileInput!
}

input UserProfileCreateManyInput {
  createdAt: DateTime
  firstName: String!
  id: String
  lastName: String!
  updatedAt: DateTime
  userId: String!
}

input UserProfileCreateNestedOneWithoutUserInput {
  connect: UserProfileWhereUniqueInput
  connectOrCreate: UserProfileCreateOrConnectWithoutUserInput
  create: UserProfileUncheckedCreateWithoutUserInput
}

input UserProfileCreateOrConnectWithoutUserInput {
  create: UserProfileUncheckedCreateWithoutUserInput!
  where: UserProfileWhereUniqueInput!
}

input UserProfileCreateWithoutUserInput {
  createdAt: DateTime
  firstName: String!
  id: String
  lastName: String!
  updatedAt: DateTime
}

type UserProfileMaxAggregateOutputType {
  createdAt: DateTime
  firstName: String
  id: String
  lastName: String
  updatedAt: DateTime
  userId: String
}

type UserProfileMinAggregateOutputType {
  createdAt: DateTime
  firstName: String
  id: String
  lastName: String
  updatedAt: DateTime
  userId: String
}

input UserProfileOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserProfileRelationFilter {
  is: UserProfileWhereInput
  isNot: UserProfileWhereInput
}

enum UserProfileScalarFieldEnum {
  createdAt
  firstName
  id
  lastName
  updatedAt
  userId
}

input UserProfileScalarWhereWithAggregatesInput {
  AND: [UserProfileScalarWhereWithAggregatesInput]
  NOT: [UserProfileScalarWhereWithAggregatesInput]
  OR: [UserProfileScalarWhereWithAggregatesInput]
  createdAt: DateTimeWithAggregatesFilter
  firstName: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  lastName: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input UserProfileUncheckedCreateInput {
  createdAt: DateTime
  firstName: String!
  id: String
  lastName: String!
  updatedAt: DateTime
  userId: String!
}

input UserProfileUncheckedCreateNestedOneWithoutUserInput {
  connect: UserProfileWhereUniqueInput
  connectOrCreate: UserProfileCreateOrConnectWithoutUserInput
  create: UserProfileUncheckedCreateWithoutUserInput
}

input UserProfileUncheckedCreateWithoutUserInput {
  createdAt: DateTime
  firstName: String!
  id: String
  lastName: String!
  updatedAt: DateTime
}

input UserProfileUncheckedUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input UserProfileUncheckedUpdateManyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
}

input UserProfileUncheckedUpdateOneWithoutUserInput {
  connect: UserProfileWhereUniqueInput
  connectOrCreate: UserProfileCreateOrConnectWithoutUserInput
  create: UserProfileUncheckedCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: UserProfileUncheckedUpdateWithoutUserInput
  upsert: UserProfileUpsertWithoutUserInput
}

input UserProfileUncheckedUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserProfileUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutProfileInput
}

input UserProfileUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserProfileUpdateOneWithoutUserInput {
  connect: UserProfileWhereUniqueInput
  connectOrCreate: UserProfileCreateOrConnectWithoutUserInput
  create: UserProfileUncheckedCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: UserProfileUncheckedUpdateWithoutUserInput
  upsert: UserProfileUpsertWithoutUserInput
}

input UserProfileUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserProfileUpsertWithoutUserInput {
  create: UserProfileUncheckedCreateWithoutUserInput!
  update: UserProfileUncheckedUpdateWithoutUserInput!
}

input UserProfileWhereInput {
  AND: [UserProfileWhereInput]
  NOT: [UserProfileWhereInput]
  OR: [UserProfileWhereInput]
  createdAt: DateTimeFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  updatedAt: DateTimeFilter
  user: UserWhereInput
  userId: StringFilter
}

input UserProfileWhereUniqueInput {
  id: String
  userId: String
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  confirmed
  createdAt
  email
  id
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput]
  NOT: [UserScalarWhereWithAggregatesInput]
  OR: [UserScalarWhereWithAggregatesInput]
  confirmed: BoolWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input UserUncheckedCreateInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  emailConfirmation: EmailConfirmationUncheckedCreateNestedOneWithoutUserInput
  id: String
  profile: UserProfileUncheckedCreateNestedOneWithoutUserInput
  projectMembersip: ProjectMembersipUncheckedCreateNestedManyWithoutUserInput
  teamMemberships: TeamMembershipUncheckedCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserUncheckedCreateWithoutEmailConfirmationInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  id: String
  profile: UserProfileUncheckedCreateNestedOneWithoutUserInput
  projectMembersip: ProjectMembersipUncheckedCreateNestedManyWithoutUserInput
  teamMemberships: TeamMembershipUncheckedCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserUncheckedCreateWithoutProfileInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  emailConfirmation: EmailConfirmationUncheckedCreateNestedOneWithoutUserInput
  id: String
  projectMembersip: ProjectMembersipUncheckedCreateNestedManyWithoutUserInput
  teamMemberships: TeamMembershipUncheckedCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserUncheckedCreateWithoutProjectMembersipInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  emailConfirmation: EmailConfirmationUncheckedCreateNestedOneWithoutUserInput
  id: String
  profile: UserProfileUncheckedCreateNestedOneWithoutUserInput
  teamMemberships: TeamMembershipUncheckedCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserUncheckedCreateWithoutTeamMembershipsInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  emailConfirmation: EmailConfirmationUncheckedCreateNestedOneWithoutUserInput
  id: String
  profile: UserProfileUncheckedCreateNestedOneWithoutUserInput
  projectMembersip: ProjectMembersipUncheckedCreateNestedManyWithoutUserInput
  updatedAt: DateTime
}

input UserUncheckedUpdateInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailConfirmation: EmailConfirmationUncheckedUpdateOneWithoutUserInput
  id: StringFieldUpdateOperationsInput
  profile: UserProfileUncheckedUpdateOneWithoutUserInput
  projectMembersip: ProjectMembersipUncheckedUpdateManyWithoutUserInput
  teamMemberships: TeamMembershipUncheckedUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateManyInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutEmailConfirmationInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  profile: UserProfileUncheckedUpdateOneWithoutUserInput
  projectMembersip: ProjectMembersipUncheckedUpdateManyWithoutUserInput
  teamMemberships: TeamMembershipUncheckedUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutProfileInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailConfirmation: EmailConfirmationUncheckedUpdateOneWithoutUserInput
  id: StringFieldUpdateOperationsInput
  projectMembersip: ProjectMembersipUncheckedUpdateManyWithoutUserInput
  teamMemberships: TeamMembershipUncheckedUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutProjectMembersipInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailConfirmation: EmailConfirmationUncheckedUpdateOneWithoutUserInput
  id: StringFieldUpdateOperationsInput
  profile: UserProfileUncheckedUpdateOneWithoutUserInput
  teamMemberships: TeamMembershipUncheckedUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutTeamMembershipsInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailConfirmation: EmailConfirmationUncheckedUpdateOneWithoutUserInput
  id: StringFieldUpdateOperationsInput
  profile: UserProfileUncheckedUpdateOneWithoutUserInput
  projectMembersip: ProjectMembersipUncheckedUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailConfirmation: EmailConfirmationUpdateOneWithoutUserInput
  id: StringFieldUpdateOperationsInput
  profile: UserProfileUpdateOneWithoutUserInput
  projectMembersip: ProjectMembersipUpdateManyWithoutUserInput
  teamMemberships: TeamMembershipUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutEmailConfirmationInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutEmailConfirmationInput
  create: UserUncheckedCreateWithoutEmailConfirmationInput
  update: UserUncheckedUpdateWithoutEmailConfirmationInput
  upsert: UserUpsertWithoutEmailConfirmationInput
}

input UserUpdateOneRequiredWithoutProfileInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProfileInput
  create: UserUncheckedCreateWithoutProfileInput
  update: UserUncheckedUpdateWithoutProfileInput
  upsert: UserUpsertWithoutProfileInput
}

input UserUpdateOneRequiredWithoutProjectMembersipInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutProjectMembersipInput
  create: UserUncheckedCreateWithoutProjectMembersipInput
  update: UserUncheckedUpdateWithoutProjectMembersipInput
  upsert: UserUpsertWithoutProjectMembersipInput
}

input UserUpdateOneRequiredWithoutTeamMembershipsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTeamMembershipsInput
  create: UserUncheckedCreateWithoutTeamMembershipsInput
  update: UserUncheckedUpdateWithoutTeamMembershipsInput
  upsert: UserUpsertWithoutTeamMembershipsInput
}

input UserUpdateWithoutEmailConfirmationInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  profile: UserProfileUpdateOneWithoutUserInput
  projectMembersip: ProjectMembersipUpdateManyWithoutUserInput
  teamMemberships: TeamMembershipUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutProfileInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailConfirmation: EmailConfirmationUpdateOneWithoutUserInput
  id: StringFieldUpdateOperationsInput
  projectMembersip: ProjectMembersipUpdateManyWithoutUserInput
  teamMemberships: TeamMembershipUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutProjectMembersipInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailConfirmation: EmailConfirmationUpdateOneWithoutUserInput
  id: StringFieldUpdateOperationsInput
  profile: UserProfileUpdateOneWithoutUserInput
  teamMemberships: TeamMembershipUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutTeamMembershipsInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailConfirmation: EmailConfirmationUpdateOneWithoutUserInput
  id: StringFieldUpdateOperationsInput
  profile: UserProfileUpdateOneWithoutUserInput
  projectMembersip: ProjectMembersipUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutEmailConfirmationInput {
  create: UserUncheckedCreateWithoutEmailConfirmationInput!
  update: UserUncheckedUpdateWithoutEmailConfirmationInput!
}

input UserUpsertWithoutProfileInput {
  create: UserUncheckedCreateWithoutProfileInput!
  update: UserUncheckedUpdateWithoutProfileInput!
}

input UserUpsertWithoutProjectMembersipInput {
  create: UserUncheckedCreateWithoutProjectMembersipInput!
  update: UserUncheckedUpdateWithoutProjectMembersipInput!
}

input UserUpsertWithoutTeamMembershipsInput {
  create: UserUncheckedCreateWithoutTeamMembershipsInput!
  update: UserUncheckedUpdateWithoutTeamMembershipsInput!
}

input UserWhereInput {
  AND: [UserWhereInput]
  NOT: [UserWhereInput]
  OR: [UserWhereInput]
  confirmed: BoolFilter
  createdAt: DateTimeFilter
  email: StringFilter
  emailConfirmation: EmailConfirmationWhereInput
  id: StringFilter
  profile: UserProfileWhereInput
  projectMembersip: ProjectMembersipListRelationFilter
  teamMemberships: TeamMembershipListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
